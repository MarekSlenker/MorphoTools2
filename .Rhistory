object[,3:4]
table(object$Taxon, object$Classif)
table(object[,3:4])
object[,3:4]
table(object[,3:4])
data.frame(unclass(classif))
classif = table(object$Taxon, object$Classif)
data.frame(unclass(classif))
data.frame("Taxon" = attr(classif,"row.names"), classif, row.names=NULL)
classif = table(object$Taxon, object$Classif)
classif = data.frame(unclass(classif))
classif = data.frame("Taxon" = attr(classif,"row.names"), classif, row.names=NULL)
classif
rowSums(classif[2:ncol(classif)])
93  + 0 + 22+  5
classif$N = rowSums(classif[2:ncol(classif)])
classif
aggregate(Correct ~ Taxon, data = object, sum)
merge(classif,ncor)
ncor = aggregate(Correct ~ Taxon, data = object, sum)
merge(classif,ncor)
classif[1,]
classif = merge(classif, ncor)
classif[1,]
last = classif[1,]
last[1]<-"Total"
last
length(last)
colSums(classif[2:ncol(classif)])
last[2:length(last)] = colSums(classif[2:ncol(classif)])
last
classif = rbind(classif, last)
classif
ncol(classif)
names(classif)[ncol(classif)]<-"percent.correct"
classif
classif$percent.correct = with(classif,(percent.correct/N)*100)
classif
object
level = "Taxon"
classif = table(object$Taxon, object$Classif)
classif = data.frame(unclass(classif))
data.frame(level = attr(classif,"row.names"), classif, row.names = NULL)
assign(level)
assign(x = level, value = "ds")
level
x
ss= classifda.lda(data, crossval = "popo")
ss= classifda.lda(data, crossval = "pop")
ss
object = ss
unique(object[,c(2,3)])
classif
classif = table(object$Population, object$Classif)
classif<-data.frame(unclass(classif))
classif = data.frame(level = attr(classif,"row.names"), classif, row.names = NULL)
classif
rowSums(classif[2:ncol(classif)])
classif
tax
unique(object[,c(2,3)])
classif
table(object$Population, object$Classif)
classif = table(object$Population, object$Classif)
object[,c(2,3)]
unique(object[,c(2,3)])
tax = unique(object[,c(2,3)])
classif = table(object$Population, object$Classif)
tax = unique(object[,c(2,3)])
classif
tax
classif = merge(tax,classif)
classif
unique(object[,c(2,3)])
tax = unique(object$Population, object$Taxon)
tax
unique(object$Population, object$Taxon)
unique(object$Taxon, object$Population)
unique(object[,c(2,3)])
merge(tax,classif, by = "Taxon")
table(object$Population, object$Classif)
classif = table(object$Population, object$Classif)
classif
classif = as.data.frame(table(object$Population, object$Classif))
classif
object$Classif
object$Population
table(object$Population, object$Classif)
as.data.frame(table(object$Population, object$Classif))
classif = table(object$Population, object$Classif)
classif
tax = unique(object[,c(2,3)])
merge(tax,classif)
classif = table(object$Population, object$Classif)
classif
data.frame(unclass(classif))
classif = data.frame(unclass(classif))
classif = data.frame(level = attr(classif,"row.names"), classif, row.names = NULL)
classif
merge(tax,classif)
classif = table(object$Population, object$Classif)
classif
classif = data.frame(unclass(classif))
classif = data.frame(level = attr(classif,"row.names"), classif, row.names = NULL)
unique(object[,c(2,3)])
tax<-unique(object[,c(2,3)])
merge(tax,classif)
tax
object
ss= classifda.lda(data)
object = ss
classif = table(object$Taxon, object$Classif)
classif = data.frame(unclass(classif))
classif = data.frame("Taxon" = attr(classif,"row.names"), classif, row.names = NULL)
classif$N = rowSums(classif[2:ncol(classif)])
ncor = aggregate(Correct ~ Taxon, data = object, sum)
classif = merge(classif, ncor)
last = classif[1,]
last[1] = "Total"
last[2:length(last)] = colSums(classif[2:ncol(classif)])
classif = rbind(classif, last)
names(classif)[ncol(classif)] = "percent.correct"
classif$percent.correct = with(classif,(percent.correct/N)*100)
classif
ss= classifda.lda(data, crossval = "pop")
object = ss
classif = table(object$Population, object$Classif)
classif<-data.frame(unclass(classif))
classif = data.frame(Population=attr(classif,"row.names"),classif,row.names=NULL)
tax = unique(object[,c(2,3)])
merge(tax, classif)
classif = merge(tax, classif)
rowSums(classif[3:ncol(classif)])
classif$N<-rowSums(classif[3:ncol(classif)])
classif
ncor = aggregate(Correct ~ Population, data = object, sum)
ncor
classif = merge(classif, ncor)
names(classif)[ncol(classif)]<-"percent.correct"
classif$percent.correct<-with(classif,(percent.correct/N)*100)
classif
library(MorphoTools)
ss= classifda.lda(data)
knn.select(data)
classif.matrix(ss)
classif.matrix(ss, level = "Population")
ss= classifda.lda(data)
classif.matrix(ss)
ss= classifda.lda(data, crossval = "pop")
classif.matrix(ss)
classif.matrix(ss, level = "Population")
ss = classifda.knn(data, k = 11)
classif.matrix(ss)
classif.matrix(ss, level = "Population")
ss = classifda.knn(data, k = 11, crossval = "pop")
classif.matrix(ss)
classif.matrix(ss, level = "Population")
classif.matrix(ss)
ss = classifda.knn(data, k = 11, crossval = "indiv")
classif.matrix(ss)
export.res(ss, file = "ddd.txt")
sa = classif.matrix(ss)
export.res(sa, file = "ddd.txt")
object
library(MorphoTools)
ss= classifda.lda(data)
class(ss)
object = ss
as.data.frame(object)
attr(object, "class") <- "data.frame"
class(ss)
library(MorphoTools)
export.res(sa, file = "ddddsa.txt")
ss= classifda.lda(data)
export.res(ss, file = "ddddsa.txt")
ss
library(MorphoTools)
export.res(ss, file = "ddddsa.txt")
class(ss)
class(sa)
export.res(sa, file = "ddddsa.txt")
object
checkClass(object, "classifdata")
object = ss
checkClass(object, "classifdata")
order(object$Taxon,object$Population)
ordr = order(object$Taxon,object$Population)
ordr
library(MorphoTools)
data = read.morphodata("clipboard")
data
ss= classifda.lda(data)
ss
classif.matrix(ss)
ss
library(MorphoTools)
classif.matrix(ss)
library(MorphoTools)
classif.matrix(ss)
library(MorphoTools)
classif.matrix(ss)
ss
print.classifdata <- function(object) {
attr(object, "class") <- "data.frame"
print(object)
}
ss
classifda.lda(data)
data = read.morphodata("clipboard")
classifda.lda(data, crossval = "pop")
classifda.lda(data, crossval = "indiv")
library(MorphoTools)
classifda.lda(data, crossval = "indiv")
library(MorphoTools)
classifda.lda(data, crossval = "indiv")
library(MorphoTools)
classifda.lda(data)
library(MorphoTools)
classifda.lda(data)
library(MorphoTools)
classifda.lda(data)
classifda.lda(data, crossval = "pop")
library(MorphoTools)
classifda.lda(data)
library(MorphoTools)
classifda.lda(data)
library(MorphoTools)
library("MorphoTools", lib.loc="~/R/win-library/3.6")
library("MorphoTools", lib.loc="~/R/win-library/3.6")
library("MorphoTools", lib.loc="~/R/win-library/3.6")
library(car, lib.loc = "E:/Rlib")
library(carData, MorphoTools, lib.loc = "E:/Rlib")
library(car, lib.loc = "E:/Rlib")
library(heplots, lib.loc = "E:/Rlib")
library(plot3D, lib.loc = "E:/Rlib")
library(MorphoTools, lib.loc = "E:/Rlib")
library(candisc, lib.loc = "E:/Rlib")
library(MorphoTools, lib.loc = "E:/Rlib")
library(MorphoTools)
read.morphodata("clipboard")
data = read.morphodata("clipboard")
pcaRes = pca.calc(data)
plot(pcaRes)
plot.points(pcaRes)
plot.points(pcaRes, col = c("red", "green"))
plot.points(pcaRes, col = c("red", "green"), legend = T)
cdaRes = cda.calc(data)
plot.points(cdaRes)
plot.points(cdaRes, col = c("red", "green"), legend = T)
classifda.lda(cdaRes)
classifda.lda(data)
class = classifda.lda(data)
classif.matrix(class)
class = classifda.lda(data, crossval = "pop")
class = classifda.lda(data, crossval = "popo")
class = classifda.lda(data, crossval = "pop")
classif.matrix(class)
classif.matrix(class, level = "pop")
classif.matrix(class, level = "Population")
knn.select(data)
classifda.knn(data)
classifda.knn(data, 11)
classknn = classifda.knn(data, 11)
classif.matrix(classknn)
install.packages("candisc")
install.packages("plot3D")
library(MorphoTools)
data = read.morphodata("./tests/testFiles/Impatiens_individuals.txt")
knn.select(data)
library(MorphoTools)
knn.select(data)
classifda.knn(data, k = 3, crossval = "indiv")
classRes = classifda.knn(data, k = 3, crossval = "indiv")
classif.matrix(classRes)
classif.matrix(classRes, level = "Taxon")
classif.matrix(classRes, level = "Population")
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
class = classifda.lda(data, crossval = "pop")
data = read.morphodata("clipboard")
library(MorphoTools)
data = read.morphodata("clipboard")
descr.all(data)  # sumarna deskriptivna statistika znakov
descr.tax(data)  # .. znakov pre taxony
descr.pop(data)  # .. znakov pre populacie
dtx = descr.tax(data, format = "($MEAN Â± $SD)")
export.res(dtx) # -> clipboard
export.res(dtx, file="descriptive_all.txt") # do suboru
boxplot.character(data, "LF")
boxplot.character(data, "LF", lowerWhisker = 0.1, upperWhisker = 0.9, outliers = F)
boxplot.character(data, "LF")
boxplot.character(data, "LF", lowerWhisker = 0.1, upperWhisker = 0.9, outliers = T)
boxplot.character(data, "LF", col = c("green", "red"))
boxplot.all(data, folderName = "bxplts")
boxplot.all(data, col = c("green", "red"), pch = 8)
boxplot.all(data, folderName = "bxplts")
boxplot.all(data, folderName = "bxplts", col = c("green", "red"))
correlations.p = cormat(data, method="pearson")
correlations.s = cormat(data, method="spearman")
correlations.s
correlations.s = cormat.signifTest(data, method="spearman")
warnings()
correlations.s
library(MorphoTools)
cormat.signifTest(data, method="spearman")
library(MorphoTools)
cormat.signifTest(data, method="spearman")
pcaRes = pca.calc(data)
summary(pcaRes)
plot.points(pcaRes, col = c("black", "red"))
plot( x = pcaRes$objects$scores[ ,1],
y = pcaRes$objects$scores[ ,2],
col = pcaRes$objects$Taxon)
plot.points(pcaRes,
col = c("blue", "darkgreen"),
pch = c(8, 18),
cex = 1.25,
legend = T, legend.pos = "topright");
plot.3D(pcaRes, col = c("blue", "darkgreen"))
plot.3D(pcaRes, col = c("blue", "darkgreen"), type = "h")
plot.3D(pcaRes, col = c("blue", "darkgreen"), phi = 10, theta = 60)
eigenVectors = pca.eigenVectors(pcaRes)
eigenVectors
pca.eigenVectors(pcaRes, n = 10)
pcaRes$eigenVectors[, 1:3]
populations = popul.otu (data)
populations
cdaRes = cda.calc(data)
plot.points(cdaRes, col = c("green", "red"))
plot.points(cdaRes,
col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
plot.points(cdaRes,
col = c(rgb(0,0,0, alpha=0.6),
rgb(1,1,1, alpha=0.6)),		breaks = seq(-6, 6, 0.5))
plot.points(cdaRes,
col = c(rgb(0,0,0, alpha=0.6),
rgb(1,1,1, alpha=0.6)),
breaks = seq(-6, 6, 0.5))
cdaRes$totalCanonicalStructure
cda.totalCanonicalStructure(cdaRes)
cdaRes$axesVariance
cdaRes$cumulativeAxesVariance
cdaRes$
summary(cdaRes)
summary(cdaRes)
# populations as the leave-out units
knn.select (data, crossval = "indiv") # "indiv" alebo "pop"
# the optimal K is 3
indiv.knn  = classifda.knn(individuals, k = 4, crossval = "indiv")
# the optimal K is 3
indiv.knn  = classifda.knn(data, k = 4, crossval = "indiv")
classif.matrix(indiv.knn, level = "Taxon")
classif.matrix(indiv.knn, level = "Population")
data = read.morphodata("clipboard")
cda.prat = cda.calc(data)
plot.points(cda.prat, col = c("red", "green", "navy"), legend = T)
cda.prat$axesVariance
cda.prat$cumulativeAxesVariance
summary(cda.prat)
cda.prat$eigenValues
cda.eigenValues(cda.prat)
data = read.morphodata("clipboard")
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
data
boxplot.character(data, character = "WP")
boxplot.character(data, character = "WP", varwidth = T)
boxplot.character(data, character = "WP", varwidth = T, notch = T)
boxplot.character(data, character = "WP", varwidth = T, notch = T, names = c("aa", "bb", "cc"))
data = read.morphodata("./tests/testFiles/sample.txt")
data
boxplot.character(data, character = "AW", varwidth = T, notch = T, )
boxplot.character(data, character = "AW", varwidth = T, notch = F)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red")
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange")
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", xlab = "L")
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", ylab = "L")
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", xlab = NULL, ylab = NULL)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", ann = F, xlab = "rrr")
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", xlab = "rrr")
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", xlab = "rrr", width = 2)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", xlab = "rrr", width = 5)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", xlab = "rrr", width = 0.1)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", xlab = "rrr", width = 1)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", xlab = "rrr")
# internal
giveMeNiceBoxPlot <- function(object, character, upperWhisker, lowerWhisker) {
# vyrataj klasicky bxplot
bxPlot = boxplot(unlist(object$data[character]) ~ object$Taxon, data = object$data, plot = F)
# a teraz ho zmen
taxa = levels(object$Taxon)
# clear bxPlot$out and   bxPlot$group
bxPlot$out = numeric(0)
bxPlot$group = numeric(0)
for (tax in taxa)   {
dataTaxon = object$data[which( object$Taxon %in% tax), ][character]
upWhisker = as.numeric( quantile(dataTaxon, probs = upperWhisker, na.rm = T)  )
loWhisker = as.numeric( quantile(dataTaxon, probs = lowerWhisker, na.rm = T)  )
bxPlot$stats[1, which(tax == taxa)] = loWhisker
bxPlot$stats[5, which(tax == taxa)] = upWhisker
for (individual in  1:nrow(dataTaxon)){
if (!(is.na(dataTaxon[individual, ]))){
if (dataTaxon[individual, ] > upWhisker | dataTaxon[individual, ] < loWhisker){
bxPlot$out = c(bxPlot$out, dataTaxon[individual, ])
bxPlot$group = c(bxPlot$group, which(tax == taxa))
}
}
}
}
return(bxPlot)
}
object = data
lowerWhisker = 0.05
upperWhisker = 0.95
character = "AW"
giveMeNiceBoxPlot(object, character, upperWhisker = upperWhisker, lowerWhisker = lowerWhisker)
bxPlot = giveMeNiceBoxPlot(object, character, upperWhisker = upperWhisker, lowerWhisker = lowerWhisker)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", frame = FALSE)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", frame = FALSE, border 2:6)
boxplot.character(data, character = "AW", varwidth = T, notch = F, border = "red", col = "orange", frame = FALSE, border = 2:6)
bxPlot
bxp(bxPlot, boxfill = col, outline = outliers)
bxp(bxPlot, boxfill = col)
bxp(bxPlot)
bxp(bxPlot, border = 2:6)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6)
pch = 22
bxp(bxPlot, border = 2:6, pch = 22)
bxp(bxPlot, border = 2:6, pch = 8)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, lty = 3)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, lty = 3, lwd = 1.5, medcol = "white")
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, lwd = 1.5, medcol = "white")
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, lwd = 3.5, medcol = "white")
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, lwd = 3.5, medcol = "white",  medcex = 2, medpch = 20)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 20)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 8)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 20)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 23)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 21)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 18)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 18, lwd = 3.5)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 18, outwex = 2)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", frame = TRUE, border = 2:6, medcex = 2, medpch = 18, horizontal=TRUE)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = F)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T)
plot.points(cdaRes)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,add = T)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,frame.plot = T)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,frame.plot = F)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,frame = F)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,frame = T)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,log = T)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,log = 10)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,frame = F, border, notch.frac = 0.8)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,frame = F, notch.frac = 0.8)
boxplot.character(data, character = "AW", varwidth = T, notch = F,  col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0.8)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0.8)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0.2)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 1)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0.8)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0.5)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0.5, col.main = "red")
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0.5)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = F, notch.frac = 0.5)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F, notch = T, notch.frac = 0.5)
library(MorphoTools)
boxplot.character(data, character = "AW", varwidth = T, col = "orange", show.names = T ,frame = F)
data
boxplot.character(data, character = "LL", varwidth = T, col = "orange", show.names = T ,frame = F)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", show.names = T ,frame = F, cex.main = 1)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", show.names = T ,frame = F, cex.main = 1)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,frame = F, cex.main = 1)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,frame = F, cex.main = 1)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,frame = F, cex.main = 1 ,axes = FALSE)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,frame = F, cex.main = 1 ,frame = TRUE)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,cex.main = 1 ,frame = TRUE)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,cex.main = 1 ,frame = F)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,cex.main = 1 ,frame = F, cex = 2)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,cex.main = 1 ,frame = F, cex = 2, cex.main = 2)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,cex.main = 1 ,frame = F, cex.main = 2)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,frame = F, cex = 2, cex.main = 2)
boxplot.character(data, character = "LL", varwidth = T, col = "orange", border = "red", how.names = T ,frame = F, cex = 1, cex.main = 2)
boxplot.character(object, "ST", col = "orange", border = "red")
library(MorphoTools)
boxplot.character(object, "ST", col = "orange", border = "red")
boxplot.character(object, "ST", outliers = TRUE, pch = 8, lowerWhisker = 0.05, upperWhisker = 0.95)
boxplot.character(object, "ST", outliers = FALSE, lowerWhisker = 0.1, upperWhisker = 0.9)
boxplot.character(object, "ST", varwidth = T, notch = T, boxwex = 0.4, staplewex = 1.3, horizontal = T)
boxplot.all(object, folderName = "boxplots77")
boxplot.character(object, "ST", boxlwd = 0.8)
boxplot.character(object, "ST", boxlwd = 1.8)
boxplot.character(object, "ST", boxlwd = 2)
boxplot.character(object, "ST", boxlwd = 3)
boxplot.character(object, "ST", boxlwd = 2)
boxplot.character(object, "ST", boxlwd = 0.5)
boxplot.character(object, "ST", boxlwd = 2)
boxplot.character(object, "ST", boxlty = 2)
boxplot.character(object, "ST", boxlty = 2, medlwd = 2)
boxplot.character(object, "ST", boxlty = 2, medlwd = 5)
boxplot.character(object, "ST", boxlty = 2, medlwd = 5, medbg = "red")
boxplot.character(object, "ST", boxlty = 2, medlwd = 5, whiskcol = "red")
boxplot.character(object, "ST", boxlty = 1, medlwd = 5, whisklty = 2, whiskcol = "red", )
boxplot.character(object, "ST", boxlty = 1, medlwd = 5, whisklty = 2, whiskcol = "red", staplecol = "red" )
boxplot.character(object, "ST", boxlty = 1, medlwd = 5, whisklty = 2, whiskcol = "red", staplecol = "red", outcol = "green" )
boxplot.character(object, "ST", boxlty = 1, medlwd = 5, whisklty = 2, whiskcol = "red", staplecol = "red", outcol = "grey" )
boxplot.character(object, "ST", boxlty = 1, medlwd = 5, whisklty = 2, whiskcol = "red", staplecol = "red", outcol = "grey", pch = "-")
library(MorphoTools)
library(MorphoTools)
