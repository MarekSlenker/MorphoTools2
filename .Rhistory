populData = data.frame(sapply(populData, function(x) ifelse(is.nan(x), NA, x)))
if (any(is.na(populData))) warning("Values of some characters are NA.", call. = FALSE)
dt = data.frame("ID" = populData[,2], "Population" = populData[,2],
"Taxon" = populData[,1], populData[ ,-c(1:2)])
return(morphodataFromDataFrame(dt))
}
mockup.OTU = popul.otu(morphoMockup)
mockup.OTU
morphoMockup
mockup.OTU
mockup.OTU
paste(mockup.OTU$ID, collapse = ",")
#'
#' @details This function return morphodata object, where each population is used as the operational
#'  taxonomic unit, thus is represented by single row with average values for each character.
#' Note that when using populations as OTUs they are handled with the same weight in all analyses
#' (disregarding population size, within-population variation, etc.)
#'
#' @examples
#' populations = popul.otu(individuals)
#'
#' @export
popul.otu <- function(object) {
checkClass(object, "morphodata")
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData = data.frame(sapply(populData, function(x) ifelse(is.nan(x), NA, x)))
if (any(is.na(populData))) warning("Values of some characters are NA.", call. = FALSE)
dt = data.frame("ID" = populData[,2], "Population" = populData[,2],
"Taxon" = populData[,1], populData[ ,-c(1:2)])
return(morphodataFromDataFrame(dt))
}
popul.otu(morphoMockup)
mockup.OTU
View(mockup.OTU)
mockup.OTU[["ID"]]
#'
#' @details This function return morphodata object, where each population is used as the operational
#'  taxonomic unit, thus is represented by single row with average values for each character.
#' Note that when using populations as OTUs they are handled with the same weight in all analyses
#' (disregarding population size, within-population variation, etc.)
#'
#' @examples
#' populations = popul.otu(individuals)
#'
#' @export
popul.otu <- function(object) {
checkClass(object, "morphodata")
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData = data.frame(sapply(populData, function(x) ifelse(is.nan(x), NA, x)))
if (any(is.na(populData))) warning("Values of some characters are NA.", call. = FALSE)
dt = data.frame("ID" = populData[,2], "Population" = populData[,2],
"Taxon" = populData[,1], populData[ ,-c(1:2)])
return(morphodataFromDataFrame(dt))
}
morphoDataFrame = data.frame("ID" = c(1,2,3,4,5,6,7,8),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = 1:8,
"Ch2" = 11:18))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
mockup.OTU = popul.otu(morphoMockup)
mockup.OTU
View(morphoDataFrame)
View(morphoMockup)
View(morphoMockup[["data"]])
morphoDataFrame = data.frame("ID" = c(id1,id2,id3,id4,id5,id6,id7,id8),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = 1:8,
"Ch2" = 11:18))
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = 1:8,
"Ch2" = 11:18))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
morphoMockup
mockup.OTU = popul.otu(morphoMockup)
mockup.OTU
library(MorphoTools)
mockup.OTU = popul.otu(morphoMockup)
#'
#' @details This function return morphodata object, where each population is used as the operational
#'  taxonomic unit, thus is represented by single row with average values for each character.
#' Note that when using populations as OTUs they are handled with the same weight in all analyses
#' (disregarding population size, within-population variation, etc.)
#'
#' @examples
#' populations = popul.otu(individuals)
#'
#' @export
popul.otu <- function(object) {
checkClass(object, "morphodata")
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData = data.frame(sapply(populData, function(x) ifelse(is.nan(x), NA, x)))
if (any(is.na(populData))) warning("Values of some characters are NA.", call. = FALSE)
dt = data.frame("ID" = populData[,2], "Population" = populData[,2],
"Taxon" = populData[,1], populData[ ,-c(1:2)])
return(morphodataFromDataFrame(dt))
}
mockup.OTU = popul.otu(morphoMockup)
mockup.OTU = popul.otu(morphoMockup)
object = morphoMockup
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData = data.frame(sapply(populData, function(x) ifelse(is.nan(x), NA, x)))
populData
if (any(is.na(populData))) warning("Values of some characters are NA.", call. = FALSE)
dt = data.frame("ID" = populData[,2], "Population" = populData[,2],
"Taxon" = populData[,1], populData[ ,-c(1:2)])
dt
populData
object$Population
list( object$Taxon, object$Population)
populData
object$Taxon
aggregate(object$data, by =  list( as.character(object$Taxon), object$Population), mean, na.rm=TRUE)
list( as.character(object$Taxon),  as.character(object$Population))
populData = aggregate(object$data, by =  list( as.character(object$Taxon),  as.character(object$Population)), mean, na.rm=TRUE)
populData
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData
populData
object$data
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData
populData = data.frame(sapply(populData, function(x) ifelse(is.nan(x), NA, x)))
populData
populData[, 1]
populData[1, ]
populData[, 1]
populData[, -c(1,2)]
populData[, c(1,2)]
populData[, c(-1,-2)]
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData = data.frame(sapply(populData[, c(-1,-2)], function(x) ifelse(is.nan(x), NA, x)))
populData
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData[, c(-1,-2)] = data.frame(sapply(populData[, c(-1,-2)], function(x) ifelse(is.nan(x), NA, x)))
populData
if (any(is.na(populData[, c(-1,-2)]))) warning("Values of some characters are NA.", call. = FALSE)
#'
#' @details This function return morphodata object, where each population is used as the operational
#'  taxonomic unit, thus is represented by single row with average values for each character.
#' Note that when using populations as OTUs they are handled with the same weight in all analyses
#' (disregarding population size, within-population variation, etc.)
#'
#' @examples
#' populations = popul.otu(individuals)
#'
#' @export
popul.otu <- function(object) {
checkClass(object, "morphodata")
populData = aggregate(object$data, by =  list( object$Taxon, object$Population), mean, na.rm=TRUE)
populData[, -c(1:2)] = data.frame(sapply(populData[, -c(1:2)], function(x) ifelse(is.nan(x), NA, x)))
if (any(is.na(populData[, -c(1:2)]))) warning("Values of some characters are NA.", call. = FALSE)
dt = data.frame("ID" = populData[,2], "Population" = populData[,2],
"Taxon" = populData[,1], populData[ ,-c(1:2)])
return(morphodataFromDataFrame(dt))
}
popul.otu(morphoMockup)
paste(mockup.OTU$data, collapse = " ")
morphoMockup
morphoMockup
paste(morphoMockup$data, collapse = " ")
data.frame("Ch1" = 1:8, "Ch2" = 11:18, "Ch3" = c(1,2,NA,4,NA,NA,7))
c(11:18)
na.meanSubst <- function(object){
checkClass(object, "morphodata")
meansubst<-function(x){
m<-mean(x,na.rm=T)
if (is.nan(m)) m<-NA
x[which(is.na(x))]<-m
x = round(x, digits = 3)
return(x)}
populs<-levels(object$Population)
# R passes arguments by value
for (pop in populs) {
popPositions = which( object$Population %in% pop)
object$data[popPositions,] = sapply(object$data[popPositions,],meansubst)
if (any(is.na(object$data[popPositions,])))
warning("unable to replace NAs in population ", pop,
". Probably all values for that characters are NA.", call. = FALSE)
}
return(object)
}
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = c(1, 2, NA, 4, 5, 6, NA, 8),
"Ch2" = c(11, NA, 13, NA, 15, NA, 17, 18)))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
meanMockup = na.meanSubst(morphoMockup)
meanMockup
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop1", "Pop1", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = c(1, 2, NA, 4, 5, 6, NA, 8),
"Ch2" = c(11, NA, 13, NA, 15, NA, 17, 18)))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
meanMockup = na.meanSubst(morphoMockup)
meanMockup
paste(meanMockup$data, collapse = " ")
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop1", "Pop1", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = c(1, 2, NA, 4, 5, 6, NA, NA),
"Ch2" = c(11, NA, 13, NA, 15, NA, 17, 18)))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
meanMockup = na.meanSubst(morphoMockup)
meanMockup
paste(meanMockup$data, collapse = " ")
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = 1:8,
"Ch2" = 11:18))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
#' @export
pca.calc <- function(object) {
checkClass(object, "morphodata")
# xdata<-na.omit(DATA)
# toto nerobim, nebudem uzivatelovi nic z jeho dat vyhadzovat. nech si to vyrisi sam
# miesto toho testujem na NA a vyhodim vynimku
if (any(is.na(object$data))) stop("NA values in 'object' ", call. = FALSE)
pcaResult = newPcadata()
prcompRes = prcomp(object$data, center=T, scale.=T)
prcompSummary = summary(prcompRes)
pcaResult$sdev = prcompRes$sdev
pcaResult$center = prcompRes$center
pcaResult$scale = prcompRes$scale
# Koutecky 2014
#pcaResult$scores = predict(prcompRes,object$data)
pcaResult$objects$scores = prcompRes$x
pcaResult$objects$ID = object$ID
pcaResult$objects$Population = object$Population
pcaResult$objects$Taxon = object$Taxon
# Koutecky 2014
#pcaResult$eigenVectors = apply(prcompRes$rotation,1,function(x) x*prcompRes$sdev)
pcaResult$eigenVectors = prcompRes$rotation
pcaResult$eigenValues = sapply(prcompRes$sdev,function(x) x^2)
pcaResult$axesVariance = prcompSummary$importance[2,]
pcaResult$cumulativeAxesVariance = prcompSummary$importance[3,]
return(pcaResult)
}
checkClass <- function(object, class) {
if (! (is(object, class))) stop(paste("object is not of class '", class, "' ", sep = ""), call. = F)
}
pca.calc(morphoMockup)
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
# Class "morphodata"
morphodataFromDataFrame <- function(indata) {
# check for required columns
if(!("ID" %in% colnames(indata)) | !("Population" %in% colnames(indata)) | !("Taxon" %in% colnames(indata)))
stop("input do not contains required columns", call. = F)
data = list(
"ID" = as.factor(indata$ID),
"Population" = as.factor(indata$Population),
"Taxon" = as.factor(indata$Taxon),
"data" = as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID))
)
#testuj ci tam nie je nejaky nezmysel .. slovo v cislach etc   .  cislo ako pop?
if (!(is.numeric(as.matrix(data$data)))) stop("input contains non-numeric data", call. = F)
attr(data, "class") <- "morphodata"
return(data)
}
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
pca.calc(morphoMockup)
# internal
# returns new pcadata object
newPcadata <- function() {
newPcadata <- list(sdev = numeric(),
center = numeric(),
scale = numeric(),
objects = list(
ID = numeric(),
Population = numeric(),
Taxon = numeric(),
scores = numeric()),
eigenVectors = numeric(),
eigenValues = numeric(),
axesVariance = numeric(),
cumulativeAxesVariance = numeric())
attr(newPcadata, "class") <- "pcadata"
return(newPcadata)
}
pca.calc(morphoMockup)
pcaRes = pca.calc(morphoMockup)
plot(pcaRes)
plot.pcadata <- function(object, axes = c(1,2), xlab = NULL, ylab = NULL,
pch = 16, col = "black", ...) {
checkClass(object, "pcadata")
# skontroluj ci axes = 2
if (length(axes) != 2) stop("you have to specifi 2 axes (e.g., axes = c(1,2))", call. = F)
if (is.null(xlab))
xlab = paste("PC",axes[1], " (", round(object$axesVariance[axes[1]]*100, digits = 2) ,"%)", sep = "")
if (is.null(ylab))
ylab = paste("PC",axes[2], " (", round(object$axesVariance[axes[2]]*100, digits = 2) ,"%)", sep = "")
# nastav pch a col spravne podla taxonu
object$pch = as.numeric( setValuesForVector(object$objects$Taxon, pch))
object$col = setValuesForVector(object$objects$Taxon, col)
# main plot
plot(x = object$objects$scores[ ,axes[1]], y = object$objects$scores[ ,axes[2]],
xlab = xlab, ylab = ylab, pch = object$pch, col = object$col, ... )
}
plot(pcaRes)
setValuesForVector <- function(vector, symbols) {
levels = levels(as.factor(vector))
for (level in levels) {
levelPos = which( levels %in% level )
while (levelPos > length(symbols)) {
# ak uzivatel zada 2 pch pre 3 taxony, tak pre posledny taxon 3 - 2 a pch bude 1
levelPos = levelPos - length(symbols)
}
#symbolsPositions = which( object$objects$Taxon %in% level)
#vector[symbolsPositions == level] = symbols[levelPos]
vector = as.character(vector)
vector[vector == level] = symbols[levelPos]
vector = as.factor(vector)
}
return(as.character(vector))
}
plot(pcaRes)
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = c(1,3,4,6,1,7,12,8),
"Ch2" = c(11, 12,42,12,32,11,22,18)))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
pcaRes = pca.calc(morphoMockup)
plot(pcaRes)
plot(pcaRes, col = c("red", "green", "blue"))
pcaRes
paste(pcaRes$center, collapse = " ")
paste(pcaRes$sdev, collapse = " ")
paste(pcaRes$scale, collapse = " ")
paste(pcaRes$objects, collapse = " ")
paste(pcaRes$eigenVectors, collapse = " ")
paste(pcaRes$eigenValues, collapse = " ")
paste(pcaRes$axesVariance, collapse = " ")
paste(pcaRes$cumulativeAxesVariance, collapse = " ")
export.res(morphoMockup, file = "../testFiles/PCA.morphoMockup")
export.res(morphoMockup, file = "../testFiles/PCA.morphoMockup.txt")
export.res(morphoMockup, file = "~/PCA.morphoMockup.txt")
pca.calc(morphoMockup)
clust(morphoMockup)
clust(morphoMockup)
plot(clust(morphoMockup))
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = c(1,3,4,6,1,7,12,8),
"Ch2" = c(11, 12,42,12,32,11,22,18)))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
clust(morphoMockup)
clustRes = clust(morphoMockup)
clustRes
View(clustRes)
clustRes$method
clustRes$merge
clustRes$labels
paste(clustRes$labels, collapse = " ")
cormat(morphoMockup)
paste(cormatRes, collapse = " ")
cormatRes = cormat(morphoMockup)
paste(cormatRes, collapse = " ")
cormatRes = cormat.signifTest(morphoMockup)
cormatRes
object
object = morphoMockup
table = matrix(data = numeric(), nrow = ncol(object$data), ncol = ncol(object$data))
colnames(table) = colnames(object$data)
row.names(table) = colnames(object$data)
table
colnames(object$data)
colnames(object$data)
for (row in colnames(object$data)) {
for (col in colnames(object$data)) {
cc = cor.test(x = object$data[, row], y = object$data[, col], method = method,
use="pairwise.complete.obs", alternative = alternative)
table[row, col] = paste( round(cc$estimate, digits = 3), "; p-value = ", round(cc$p.value, digits = 3), sep = "" )
}
}
table
library(MorphoTools)
cormatRes = cormat.signifTest(morphoMockup)
cormatRes
View(cormatRes)
paste(cormatRes, collapse = " ")
cormatRes = cormat.signifTest(morphoMockup)
(paste(cormatRes, collapse = " ")
)
cormatRes[1,1]
cormatRes[2,2]
cormatRes[2,3]
as.character(cormatRes[2,2])
giveMeNiceBoxPlot <- function(object, character, upperWhisker, lowerWhisker) {
# vyrataj klasicky bxplot
bxPlot = boxplot(unlist(object$data[character]) ~ object$Taxon, data = object$data, plot = F)
# a teraz ho zmen
taxa = levels(object$Taxon)
# clear bxPlot$out and   bxPlot$group
bxPlot$out = numeric(0)
bxPlot$group = numeric(0)
for (tax in taxa)   {
dataTaxon = object$data[which( object$Taxon %in% tax), ][character]
upWhisker = as.numeric( quantile(dataTaxon, probs = upperWhisker, na.rm = T)  )
loWhisker = as.numeric( quantile(dataTaxon, probs = lowerWhisker, na.rm = T)  )
bxPlot$stats[1, which(tax == taxa)] = loWhisker
bxPlot$stats[5, which(tax == taxa)] = upWhisker
for (individual in  1:nrow(dataTaxon)){
if (!(is.na(dataTaxon[individual, ]))){
if (dataTaxon[individual, ] > upWhisker | dataTaxon[individual, ] < loWhisker){
bxPlot$out = c(bxPlot$out, dataTaxon[individual, ])
bxPlot$group = c(bxPlot$group, which(tax == taxa))
}
}
}
}
return(bxPlot)
}
giveMeNiceBoxPlot(morphoMockup, "Ch1", 0.95, 0.05)
#'  (without the most extreme 10% of values) use to be used in taxa descriptions, determination keys, etc. Rectangle define 25th and 75th
#'  percentiles, bold horizontal line show median.
#'
#' @examples
#' boxplot.character(myMorphoData, "ST", col = "grey", border = "red")
#' boxplot.character(myMorphoData, "ST", outline = TRUE, pch = 8, lowerWhisker = 0.05, upperWhisker = 0.95)
#' boxplot.character(myMorphoData, "ST", outline = FALSE, xlab = "Taxa", ylab = "length", main = "Total stem height (cm)")
#' boxplot.character(myMorphoData, "ST", varwidth = T, notch = T, boxwex = 0.4, staplewex = 1.3, horizontal = T)
#'
#' @export
boxplot.character <- function(object, character, outline = TRUE, lowerWhisker = 0.05, upperWhisker = 0.95, col = "white", ...) {
checkClass(object, "morphodata")
if (!(character %in% colnames(object$data))) stop(paste("character", character, "was not found in attached data."), call. = F)
bxPlot = giveMeNiceBoxPlot(object, character, upperWhisker = upperWhisker, lowerWhisker = lowerWhisker)
bxp(bxPlot, boxfill = col, outline = outline, ...)
}
boxplot.character(morphoMockup, "Ch1", 0.95, 0.05)
morphoMockup
boxplot.character(morphoMockup, "data.Ch1", 0.95, 0.05)
bxplot = giveMeNiceBoxPlot(morphoMockup, "data.Ch1", 0.95, 0.05)
bxplot
paste(bxplot$stats, collapse = " ")
paste(bxplot$out, collapse = " ")
library(MorphoTools)
library(MorphoTools)
plot(pcaRes)
plot(pcaRes, axes = c(1,3))
pcaRes
length(pcaRes$objects$scores)
length(pcaRes$eigenValues)
library(MorphoTools)
plot(pcaRes, axes = c(1,3))
plot(pcaRes, axes = c(1,3))
axes = c(1,2)
max(axes)
length(object$eigenValues)
object
library(MorphoTools)
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
pcaRes = pca.calc(data)
plot(pcaRes, axes = c(1,3))
plot(pcaRes, axes = c(1,2))
plot(pcaRes, axes = c(1,6))
plot(pcaRes, axes = c(1,36))
pcaRes
library(MorphoTools)
plot(pcaRes, axes = c(1,3))
plot(pcaRes, axes = c(1,3), col = c("red", "green"))
plot(pcaRes, axes = c(1,3), col = c("red", "green", "pink", "yellow"))
plot(pcaRes, axes = c(1,2), col = c("red", "green", "pink", "yellow"))
plot(pcaRes, axes = c(2,2), col = c("red", "green", "pink", "yellow"))
plot(pcaRes, axes = c(2,1), col = c("red", "green", "pink", "yellow"))
library(MorphoTools)
library(MorphoTools)
plot(pcaRes, col = c("red", "green", "pink", "yellow"))
plot(pcaRes, col = c("red", "green", "pink", "yellow"), xlim = c(-2,4))
plot(pcaRes, col = c("red", "green", "pink", "yellow"), main = "ds")
plot(pcaRes, col = c("red", "green", "pink", "yellow"), main = "My PCA plot", frame.plot = F)
plot(pcaRes, col = c("red", "green", "pink", "yellow"), main = "My PCA plot", frame.plot = F, cex = 0.8)
plot(pcaRes, axes = c(2,1), col = c("red", "green", "pink", "yellow"), pch = c(20, 17, 8, 21))
plot(pcaRes, axes = c(2,1), col = c("red", "green", "blue", "yellow"), pch = c(20, 17, 8, 21))
plot(pcaRes, axes = c(2,1), col = c("red", "green", "blue", "orange"), pch = c(20, 17, 8, 21))
plot(pcaRes, axes = c(2,1), col = c("red", "green", "blue", "orange"), pch = c(20, 17, 8, 21), bg = "orange")
plot(pcaRes, axes = c(2,1), col = c("red", "green", "blue", "red"), pch = c(20, 17, 8, 21), bg = "orange")
plot(pcaRes, main = "My PCA plot", frame.plot = F, cex = 0.8)
library(MorphoTools)
plot(pcaRes, main = "My PCA plot", frame.plot = F, cex = 0.8)
plot.labels(pcaRes)
library(MorphoTools)
library(MorphoTools)
plot.labels(pcaRes)
library(MorphoTools)
plot(pcaRes, main = "My PCA plot", frame.plot = F, cex = 0.8)
plot.labels(pcaRes)
library(MorphoTools)
plot.labels(pcaRes)
library(MorphoTools)
plot(pcaRes, main = "My PCA plot", frame.plot = F, cex = 0.8)
plot.labels(pcaRes)
library(MorphoTools)
plot(pcaRes, main = "My PCA lot", frame.plot = F, cex = 0.8)
plot.labels(pcaRes)
