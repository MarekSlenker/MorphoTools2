s["wieWIEA5-A2", "wieWIEA5-B2"]
))
eval(parse(text=paste("wieWIEA5 = c(wieWIEA5,", dist, ")")))
}
}
for (sample in samples$V1) {
eval(parse(text=paste(sample, "_sesterskeAlely=numeric()", sep = "")))
}
# WIE sestersle alely
for (seq in list.files("./1000+/",pattern = ".fasta", full.names = T)) {
break
dd = read.dna(seq, format = "fasta")
s = dist.dna(dd, as.matrix = T)
if ('wieWIEA4-A1' %in% row.names(dd)) {
dist = mean(c(
s["wieWIEA4-A1", "wieWIEA4-A2"],
s["wieWIEA4-B1", "wieWIEA4-B2"]
))
eval(parse(text=paste("wieWIEA4_sesterskeAlely = c(wieWIEA4_sesterskeAlely,", dist, ")")))
}
if ('wieWIEA5-A1' %in% row.names(dd)) {
dist = mean(c(
s["wieWIEA5-A1", "wieWIEA5-A2"],
s["wieWIEA5-B1", "wieWIEA5-B2"]
))
eval(parse(text=paste("wieWIEA5_sesterskeAlely = c(wieWIEA5_sesterskeAlely,", dist, ")")))
}
}
par(mar=c(1,2,2,1))
par(mfrow=c(9, 3) )
hist(acraC015_107, breaks = seq(0, 0.05, 0.0005), main = "acraC015_107", xaxt='n', yaxt='n')
hist(acraC019_103, breaks = seq(0, 0.05, 0.0005), main = "acraC019_103", xaxt='n', yaxt='n')
hist(ambC014_101, breaks = seq(0, 0.05, 0.0005), main = "ambC014_101", xaxt='n', yaxt='n')
hist(ammC029_102, breaks = seq(0, 0.05, 0.0005), main = "ammC029_102", xaxt='n', yaxt='n')
hist(apeQS4, breaks = seq(0, 0.05, 0.0005), main = "apeQS4", xaxt='n', yaxt='n')
hist(hirC062_106, breaks = seq(0, 0.06, 0.0005), main = "hirC062_106", xaxt='n', yaxt='n')
hist(lazBEL12, breaks = seq(0, 0.05, 0.0005), main = "lazBEL12", xaxt='n', yaxt='n')
hist(lazGRB3, breaks = seq(0, 0.05, 0.0005), main = "lazGRB3", xaxt='n', yaxt='n')
hist(lazTRG2, breaks = seq(0, 0.05, 0.0005), main = "lazTRG2", xaxt='n', yaxt='n')
hist(lazTRNL3, breaks = seq(0, 0.05, 0.0005), main = "lazTRNL3", xaxt='n', yaxt='n')
hist(seiBES1, breaks = seq(0, 0.05, 0.0005), main = "seiBES1", xaxt='n', yaxt='n')
hist(seiKCA1, breaks = seq(0, 0.05, 0.0005), main = "seiKCA1", xaxt='n', yaxt='n')
hist(tenKU25, breaks = seq(0, 0.05, 0.0005), main = "tenKU25", xaxt='n', yaxt='n')
hist(ulIRCA1_2, breaks = seq(0, 0.05, 0.0005), main = "ulIRCA1_2", xaxt='n', yaxt='n')
hist(ulAM11_7, breaks = seq(0, 0.05, 0.0005), main = "ulAM11_7", xaxt='n', yaxt='n')
hist(ulAM2_2, breaks = seq(0, 0.05, 0.0005), main = "ulAM2_2", xaxt='n', yaxt='n')
hist(ulGRI2, breaks = seq(0, 0.05, 0.0005), main = "ulGRI2", xaxt='n', yaxt='n')
hist(ulTRH5, breaks = seq(0, 0.05, 0.0005), main = "ulTRH5", xaxt='n', yaxt='n')
hist(ulUD4, breaks = seq(0, 0.05, 0.0005), main = "ulUD4", xaxt='n', yaxt='n')
hist(triC060_107, breaks = seq(0, 0.05, 0.0005), main = "triC060_107", xaxt='n', yaxt='n')
hist(wieWIEA4, breaks = seq(0, 0.05, 0.0005), main = "wieWIEA4", xaxt='n', yaxt='n')
hist(wieWIEA5, breaks = seq(0, 0.05, 0.0005), main = "wieWIEA5", xaxt='n', yaxt='n')
hist(wieWIEA4_sesterskeAlely, breaks = seq(0, 0.05, 0.0005), main = "wieWIEA4 sesterskeAlely", xaxt='n', yaxt='n')
hist(wieWIEA5_sesterskeAlely, breaks = seq(0, 0.05, 0.0005), main = "wieWIEA5 sesterskeAlely", xaxt='n', yaxt='n')
hist(penSOZO8, breaks = seq(0, 0.05, 0.0005), main = "penSOZO8", xaxt='n', yaxt='n')
hist(penDEM7, breaks = seq(0, 0.05, 0.0005), main = "penDEM7", xaxt='n', yaxt='n')
hist(penBAH4, breaks = seq(0, 0.05, 0.0005), main = "penBAH4", xaxt='n', yaxt='n')
wieWIEA5_sesterskeAlely
# WIE sestersle alely
for (seq in list.files("./1000+/",pattern = ".fasta", full.names = T)) {
dd = read.dna(seq, format = "fasta")
s = dist.dna(dd, as.matrix = T)
if ('wieWIEA4-A1' %in% row.names(dd)) {
dist = mean(c(
s["wieWIEA4-A1", "wieWIEA4-A2"],
s["wieWIEA4-B1", "wieWIEA4-B2"]
))
eval(parse(text=paste("wieWIEA4_sesterskeAlely = c(wieWIEA4_sesterskeAlely,", dist, ")")))
}
if ('wieWIEA5-A1' %in% row.names(dd)) {
dist = mean(c(
s["wieWIEA5-A1", "wieWIEA5-A2"],
s["wieWIEA5-B1", "wieWIEA5-B2"]
))
eval(parse(text=paste("wieWIEA5_sesterskeAlely = c(wieWIEA5_sesterskeAlely,", dist, ")")))
}
}
hist(acraC015_107, breaks = seq(0, 0.05, 0.0005), main = "acraC015_107", xaxt='n', yaxt='n')
hist(acraC019_103, breaks = seq(0, 0.05, 0.0005), main = "acraC019_103", xaxt='n', yaxt='n')
hist(ambC014_101, breaks = seq(0, 0.05, 0.0005), main = "ambC014_101", xaxt='n', yaxt='n')
hist(ammC029_102, breaks = seq(0, 0.05, 0.0005), main = "ammC029_102", xaxt='n', yaxt='n')
hist(apeQS4, breaks = seq(0, 0.05, 0.0005), main = "apeQS4", xaxt='n', yaxt='n')
hist(hirC062_106, breaks = seq(0, 0.06, 0.0005), main = "hirC062_106", xaxt='n', yaxt='n')
hist(lazBEL12, breaks = seq(0, 0.05, 0.0005), main = "lazBEL12", xaxt='n', yaxt='n')
hist(lazGRB3, breaks = seq(0, 0.05, 0.0005), main = "lazGRB3", xaxt='n', yaxt='n')
hist(lazTRG2, breaks = seq(0, 0.05, 0.0005), main = "lazTRG2", xaxt='n', yaxt='n')
hist(lazTRNL3, breaks = seq(0, 0.05, 0.0005), main = "lazTRNL3", xaxt='n', yaxt='n')
hist(seiBES1, breaks = seq(0, 0.05, 0.0005), main = "seiBES1", xaxt='n', yaxt='n')
hist(seiKCA1, breaks = seq(0, 0.05, 0.0005), main = "seiKCA1", xaxt='n', yaxt='n')
hist(tenKU25, breaks = seq(0, 0.05, 0.0005), main = "tenKU25", xaxt='n', yaxt='n')
hist(ulIRCA1_2, breaks = seq(0, 0.05, 0.0005), main = "ulIRCA1_2", xaxt='n', yaxt='n')
hist(ulAM11_7, breaks = seq(0, 0.05, 0.0005), main = "ulAM11_7", xaxt='n', yaxt='n')
hist(ulAM2_2, breaks = seq(0, 0.05, 0.0005), main = "ulAM2_2", xaxt='n', yaxt='n')
hist(ulGRI2, breaks = seq(0, 0.05, 0.0005), main = "ulGRI2", xaxt='n', yaxt='n')
hist(ulTRH5, breaks = seq(0, 0.05, 0.0005), main = "ulTRH5", xaxt='n', yaxt='n')
hist(ulUD4, breaks = seq(0, 0.05, 0.0005), main = "ulUD4", xaxt='n', yaxt='n')
hist(triC060_107, breaks = seq(0, 0.05, 0.0005), main = "triC060_107", xaxt='n', yaxt='n')
hist(wieWIEA4, breaks = seq(0, 0.05, 0.0005), main = "wieWIEA4", xaxt='n', yaxt='n')
hist(wieWIEA5, breaks = seq(0, 0.05, 0.0005), main = "wieWIEA5", xaxt='n', yaxt='n')
hist(wieWIEA4_sesterskeAlely, breaks = seq(0, 0.05, 0.0005), main = "wieWIEA4 sesterskeAlely", xaxt='n', yaxt='n')
hist(wieWIEA5_sesterskeAlely, breaks = seq(0, 0.05, 0.0005), main = "wieWIEA5 sesterskeAlely", xaxt='n', yaxt='n')
hist(penSOZO8, breaks = seq(0, 0.05, 0.0005), main = "penSOZO8", xaxt='n', yaxt='n')
hist(penDEM7, breaks = seq(0, 0.05, 0.0005), main = "penDEM7", xaxt='n', yaxt='n')
hist(penBAH4, breaks = seq(0, 0.05, 0.0005), main = "penBAH4", xaxt='n', yaxt='n')
dd = read.dna(seq, format = "fasta")
s = dist.dna(dd, as.matrix = T)
s["wieWIEA4-A1", "wieWIEA4-B1"]
s["wieWIEA4-A1", "wieWIEA4-B2"]
s["wieWIEA4-A2", "wieWIEA4-B1"]
s["wieWIEA4-A2", "wieWIEA4-B2"]
s["wieWIEA4-A2", "wieWIEA4-B2"]
s["wieWIEA4-A2", "wieWIEA4-B2"]
s["wieWIEA4-A2", "wieWIEA4-B2"]
s["wieWIEA4-A2", "wieWIEA4-B2"]
s["wieWIEA5-A1", "wieWIEA5-B1"]
s["wieWIEA5-A1", "wieWIEA5-B2"]
s["wieWIEA5-A2", "wieWIEA5-B1"]
s["wieWIEA5-A2", "wieWIEA5-B2"]
mean(c(0,
s["wieWIEA5-A1", "wieWIEA5-B1"],
s["wieWIEA5-A1", "wieWIEA5-B2"],
s["wieWIEA5-A2", "wieWIEA5-B1"],
s["wieWIEA5-A2", "wieWIEA5-B2"]
))
mean(c(
s["wieWIEA5-A1", "wieWIEA5-B1"],
s["wieWIEA5-A1", "wieWIEA5-B2"],
s["wieWIEA5-A2", "wieWIEA5-B1"],
s["wieWIEA5-A2", "wieWIEA5-B2"]
))
s["wieWIEA5-A1", "wieWIEA5-A2"]
s["wieWIEA5-B1", "wieWIEA5-B2"]
s["wieWIEA5-A1", "wieWIEA5-B1"]
mean(c(
s["wieWIEA5-A1", "wieWIEA5-A2"],
s["wieWIEA5-B1", "wieWIEA5-B2"]
))
seq
devtools::build(args = c('--resave-data','--compact-vignettes="gs+qpdf"'))
devtools::build()
devtools::build()
devtools::build()
usethis::use_cran_comments(open = rlang::is_interactive())
library(MorphoTools2)
data(centaurea)
centaurea = naMeanSubst(centaurea)
centaurea = deletePopulation(centaurea, populationName = c("LIP", "PREL"))
# classification by linear discriminant function
classifRes.lda = classif.lda(centaurea, crossval = "indiv")
# exporting results
classif.matrix(classifRes.lda, level = "taxon")
# exporting results
a = classif.matrix(classifRes.lda, level = "taxon")
str(a)
a = descrTaxon(centaurea)
str(a)
library(abind)
library(ade4)
library(ape)
library(askpass)
library(assertthat)
library(backports)
library(base64enc)
library(bit)
library(bit64)
library(brew)
library(brio)
library(broom)
library(cli)
library(clipr)
library(clisymbols)
a = descrTaxon(centaurea)
exportRes(a)
a = head(centaurea)
str(a)
head(centaurea)
head(centaurea)
head(centaurea, n = -1)
head(centaurea, n = -100)
a = characters(centaurea)
str(a)
knn.select(centaurea, crossval = "indiv")
missingCharactersTable(centaurea, level = "pop")
a= missingCharactersTable(centaurea, level = "pop")
str(a)
sW = shapiroWilkTest(centaurea)
str(sW)
sW
object=centaurea
p.value = 0.05
characters = colnames(object$data)
groups =  levels(unlist(object$Taxon))
shapiroWilkStatistic = array(numeric(), c(length(characters), length(groups)), dimnames = list(characters, groups))
shapiroWilkStatistic = as.data.frame(shapiroWilkStatistic)
array(numeric(), c(length(characters), length(groups)), dimnames = list(characters, groups))
shapiroWilkStatistic = array(numeric(), c(length(characters), length(groups)), dimnames = list(characters, groups))
shapiroWilkStatistic = as.data.frame(shapiroWilkStatistic)
groups
group="hybr"
groupPositions = which( unlist(object$Taxon) %in% group)
apply(object$data[groupPositions, ], 2,
function(x) {
out <- tryCatch(
{
stats::shapiro.test(x)$p.value
},
error=function(cond) {
return(NaN)
}
)
return(out)
}
)
apply(object$data[groupPositions, ], 2,
stats::shapiro.test(x)$p.value
)
shapiroWilkStatistic[group] = apply(object$data[groupPositions, ], 2,
function(x) {
out <- tryCatch(
{
stats::shapiro.test(x)$p.value
},
error=function(cond) {
return(NaN)
}
)
return(out)
}
)
shapiroWilkStatistic
shapiroWilkStatistic = array(numeric(), c(length(characters), length(groups)), dimnames = list(characters, groups))
shapiroWilkStatistic = as.data.frame(shapiroWilkStatistic)
# calculate descr statistics
for (group in groups) {
groupPositions = which( unlist(object$Taxon) %in% group)
shapiroWilkStatistic[group] = apply(object$data[groupPositions, ], 2,
function(x) {
out <- tryCatch(
{
stats::shapiro.test(x)$p.value
},
error=function(cond) {
return(NaN)
}
)
return(out)
}
)
}
shapiroWilkStatistic
if (! is.na(p.value)) {
greaterThenP = which(shapiroWilkStatistic > p.value)
lowerThenP = which(shapiroWilkStatistic <= p.value)
shapiroWilkStatistic[greaterThenP] = "normally distributed"
shapiroWilkStatistic[lowerThenP] = "NOT normally distributed"
}
shapiroWilkStatistic = as.matrix(shapiroWilkStatistic)
if (! is.na(p.value)) {
greaterThenP = which(shapiroWilkStatistic > p.value)
lowerThenP = which(shapiroWilkStatistic <= p.value)
shapiroWilkStatistic[greaterThenP] = "normally distributed"
shapiroWilkStatistic[lowerThenP] = "NOT normally distributed"
}
as.data.frame(shapiroWilkStatistic)
library(MorphoTools2)
sW = shapiroWilkTest(centaurea)
str(sW)
a= stepdisc.calc(centaurea)
str(a)
a=  transformCharacter(centaurea, character = "SF", FUN = function(x) log(x+1))
str(a)
#                  can be identified by stepwise discriminant analysis.)
centaurea = naMeanSubst(centaurea)
centaurea = deletePopulation(centaurea, populationName = c("LIP", "PREL"))
centaurea = keepCharacter(centaurea, c("MLW", "ML", "IW", "LS", "IV", "MW", "MF",
"AP", "IS", "LBA", "LW", "AL", "ILW", "LBS",
"SFT", "CG", "IL", "LM", "ALW", "AW", "SF") )
# add a small constant to characters witch are invariant within taxa
centaurea$data[ centaurea$Taxon == "hybr", "LM" ][1] =
centaurea$data[ centaurea$Taxon == "hybr", "LM" ][1] + 0.000001
centaurea$data[ centaurea$Taxon == "ph", "IV" ][1] =
centaurea$data[ centaurea$Taxon == "ph", "IV" ][1] + 0.000001
centaurea$data[ centaurea$Taxon == "st", "LBS"][1] =
centaurea$data[ centaurea$Taxon == "st", "LBS"][1] + 0.000001
boxMTest(centaurea)
library(heplots)
a = boxMTest(centaurea)
str(a)
cdaRes = cda.calc(centaurea)
str(cdaRes)
classifRes.lda = classif.lda(centaurea, crossval = "indiv")
# exporting results
classif.matrix(classifRes.lda, level = "taxon")
# exporting results
a = classif.matrix(classifRes.lda, level = "taxon")
str(a)
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
tinytex::tlmgr_install("makeindex")
devtools::build_manual()
library(MorphoTools2)
knitr::opts_chunk$set(
dev="png",
highlight = TRUE,
dpi = 150,
collapse = TRUE,
comment = "#>",
rownames = FALSE,
#fig.width   = 6,
#fig.height  = 5,
fig.align   = 'center'
#fig.path    = 'figs/',
#out.width='\\textwidth'
)
old.par <- par(no.readonly = TRUE)
library(MorphoTools2)
data(centaurea)
summary<-function(object){
cat("Object of class \'morphodata\'\
- contains 33 populations
- contains 4 taxa (defined groups)
Populations: BABL, BABU, BOL, BRT, BUK, CERM, CERV, CZLE, DEB, DOM, DUB, HVLT, KASH,
KOT, KOZH, KRO, LES, LIP, MIL, NEJ, NSED, OLE1, OLE2, PREL, PRIS, PROS, RTE, RUS,
SOK, STCV, STGH, VIT, VOL
Taxa (defined groups): hybr, ph, ps, st\n")
}
summary(centaurea)
rm(summary)
options(max.print = 78)
samples(centaurea)
populations(centaurea)
taxa(centaurea)
characters(centaurea)
options(max.print = 28)
shapiroWilkTest(centaurea)
histCharacter(centaurea, character = "SF")
qqnormCharacter(centaurea, character = "SF")
par(mfrow=c(2,2))
par(mar=c(4,4,2,1))
par(mgp=c(2,0.8,0))
centSquareRoot = transformCharacter(centaurea, character = "SF", FUN = sqrt)
centLog = transformCharacter(centaurea, character = "SF", FUN = function(x) log(x+1))
centCubeRoot = transformCharacter(centaurea, character = "SF", FUN = function(x) x^(1/3))
stats::qqnorm(as.matrix( na.omit(centaurea$data["SF"])), main = "original data", cex = 0.9, bty="n")
stats::qqline(as.matrix( na.omit(centaurea$data["SF"])), lwd=2)
stats::qqnorm(as.matrix( na.omit(centSquareRoot$data["SF"])), main = "sqrt transformed", cex = 0.9, bty="n")
stats::qqline(as.matrix( na.omit(centSquareRoot$data["SF"])), lwd=2)
stats::qqnorm(as.matrix( na.omit(centLog$data["SF"])), main = "log(x+1) transformed",cex = 0.9, bty="n")
stats::qqline(as.matrix( na.omit(centLog$data["SF"])), lwd=2)
stats::qqnorm(as.matrix( na.omit(centCubeRoot$data["SF"])), main = "x^(1/3) transformed", cex = 0.9, bty="n")
stats::qqline(as.matrix( na.omit(centCubeRoot$data["SF"])), lwd=2)
graphics::par(mar=c(3, 4.1, 1.8, 2.1), mgp=c(1.7, 0.6, 0), cex.axis=0.8, cex.lab=0.8, lwd=0.9)
boxplotCharacter(centaurea, character = "AL", col = c("blue","green","red","orange"), cex.main=1.3)
graphics::par(mar=c(3, 4.1, 1.8, 2.1), mgp=c(1.7, 0.6, 0), cex.axis=0.8, cex.lab=0.8, lwd=0.9)
boxplotCharacter(centaurea, character = "AL", pch = 1, cex.main=1.3,
lowerWhisker = 0.1, upperWhisker = 1)
graphics::par(mar=c(3, 4.1, 1.8, 2.1), mgp=c(1.7, 0.6, 0), cex.axis=0.8, cex.lab=0.8, lwd=0.9)
boxplotCharacter(centaurea, character = "AL", outliers = FALSE,cex.main=1.3,
frame = FALSE, horizontal = T, notch = TRUE)
options(max.print = 40)
descrTaxon(centaurea, format = "($MEAN ± $SD)", decimalPlaces = 2)
populOTU <-function(object, crossval="indiv"){
cat("Warning: Unable to calculate the means of characters AL AW ALW AP in
populations LIP PREL. Values are NA.")
}
pops = populOTU(centaurea)
rm(populOTU)
pops = populOTU(centaurea)
tempfile(pattern = "file", tmpdir = tempdir(), fileext = "")
file1 = tempfile(pattern = "file", tmpdir = tempdir(), fileext = "")
tempfile(pattern = "file", tmpdir = tempdir(), fileext = "txt")
tempfile(pattern = "file", tmpdir = tempdir(), fileext = ".txt")
file1 = tempfile(pattern = "file", tmpdir = tempdir(), fileext = ".txt")
data(centaurea)
correlations.p = cormat(centaurea, method = "Pearson")
library(MorphoTools2)
correlations.p = cormat(centaurea, method = "Pearson")
str(correlations.p)
missingSamplesTable(centaurea, level = "pop")
shapiroWilkTest(centaurea)
missingCharactersTable(centaurea, level = "pop")
usethis::use_build_ignore("vignettes/figs/", escape = TRUE)
devtools::build()
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop1", "Pop1", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"Ch1" = c(1, 2, NA, 4, 5, 6, NA, NA),
"Ch2" = c(11, NA, 13, NA, 15, NA, 17, 18))
morphoMockup = .morphodataFromDataFrame(morphoDataFrame)
# Class "morphodata"
.morphodataFromDataFrame <- function(indata) {
# check for required columns
if(!("ID" %in% colnames(indata)) | !("Population" %in% colnames(indata)) | !("Taxon" %in% colnames(indata)))
stop("Input do not contain required columns.", call. = FALSE)
data = list(
"ID" = as.factor(indata$ID),
"Population" = as.factor(indata$Population),
"Taxon" = as.factor(indata$Taxon),
"data" = as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID))
)
if (dim(indata)[2] == 4) {
colnames(data$data) = colnames(indata)[4]
}
#testuj ci tam nie je nejaky nezmysel .. slovo v cislach etc   .  cislo ako pop?
if (!(is.numeric(as.matrix(data$data)))) stop("Input contains non-numeric data.", call. = FALSE)
attr(data, "class") <- "morphodata"
return(data)
}
morphoMockup = .morphodataFromDataFrame(morphoDataFrame)
meanMockup = naMeanSubst(morphoMockup)
expect_warning(meanMockup = naMeanSubst(morphoMockup))
library(testthat)
expect_warning(meanMockup = naMeanSubst(morphoMockup))
meanMockup = naMeanSubst(morphoMockup)
suppressWarnings(meanMockup = naMeanSubst(morphoMockup))
suppressWarnings("meanMockup = naMeanSubst(morphoMockup)")
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop1", "Pop1", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"Ch1" = c(1, 2, NA, 4, 5, 6, NA, NA),
"Ch2" = c(11, NA, 13, NA, 15, NA, 17, 18))
# Class "morphodata"
.morphodataFromDataFrame <- function(indata) {
# check for required columns
if(!("ID" %in% colnames(indata)) | !("Population" %in% colnames(indata)) | !("Taxon" %in% colnames(indata)))
stop("Input do not contain required columns.", call. = FALSE)
data = list(
"ID" = as.factor(indata$ID),
"Population" = as.factor(indata$Population),
"Taxon" = as.factor(indata$Taxon),
"data" = as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID))
)
if (dim(indata)[2] == 4) {
colnames(data$data) = colnames(indata)[4]
}
#testuj ci tam nie je nejaky nezmysel .. slovo v cislach etc   .  cislo ako pop?
if (!(is.numeric(as.matrix(data$data)))) stop("Input contains non-numeric data.", call. = FALSE)
attr(data, "class") <- "morphodata"
return(data)
}
morphoMockup = .morphodataFromDataFrame(morphoDataFrame)
suppressWarnings("meanMockup = naMeanSubst(morphoMockup)")
suppressWarnings(expr = "meanMockup = naMeanSubst(morphoMockup)")
testit <- function() warning("testit")
testit() ## shows call
testit() ## no call
suppressWarnings(warning("testit"))
warning("testit")
suppressWarnings(testit())
(testit())
suppressWarnings(testit())
testit() ## shows call
testit <- function() {cat("aa"); warning("testit")}
testit() ## shows call
testit <- function() {cat("aa\n"); warning("testit")}
testit() ## shows call
testit() ## no call
suppressWarnings(testit())
suppressWarnings(naMeanSubst(morphoMockup))
meanMockup = suppressWarnings(naMeanSubst(morphoMockup))
expect_is(meanMockup, "morphodata")
expect_equal(paste(unlist(meanMockup$data), collapse = ","), "1,2,2.333,4,5,6,NA,NA,11,12,13,12,15,15,17,18")
expect_warning(naMeanSubst(morphoMockup), "Unable to replace NAs in characters Ch1 in population Pop4. Probably all values of that character are NA.")
data(centaurea)
centaurea = naMeanSubst(centaurea)
centaurea = suppressWarnings(naMeanSubst(centaurea))
centaurea = deletePopulation(centaurea, populationName = c("LIP", "PREL"))
plotPoints(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
cdaRes = cda.calc(centaurea)
plotPoints(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plotCharacters(cdaRes, labels = F)
plot.new()
plotCharacters(cdaRes, axes = c(3,5))
library(MorphoTools2)
# locally suppress warnings
data(centaurea)
cdaRes = cda.calc(centaurea)
centaurea = suppressWarnings(naMeanSubst(centaurea))
centaurea = deletePopulation(centaurea, populationName = c("LIP", "PREL"))
cdaRes = cda.calc(centaurea)
plotCharacters(cdaRes, axes = c(3,5))
dev.off()
dev.off()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
# Get the summary of your results
results$cran_summary()
results <- rhub::check_for_cran()
results$cran_summary()
results$cran_summary()
results$cran_summary()
results$cran_summary()
devtools::build(vignettes = TRUE, manual = TRUE)
devtools::build()
devtools::build()
devtools::build()
devtools::build_manual()
devtools::build()
---
library(MorphoTools2)
library(MorphoTools2)
