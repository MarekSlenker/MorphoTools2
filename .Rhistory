morphoMockup = morphodataFromDataFrame(morphoDataFrame)
cdaRes = cda.calc(morphoMockup)
plot.addEllipses(cdaRes, axes = 1)
expect_error(plot.addEllipses(cdaRes), "The method plot.addEllipses() is not applicable to histogram.", fixed = TRUE)
cdaRes = cda.calc(centaurea)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"))
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.70)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 1)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999, type = 3)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999, type = "p")
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"))
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.70)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999, type = "p")
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.70, lty = 2)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"))
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.70, lty = 2)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999, type = "p")
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"))
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.70, lty = 2)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999, type = "p",lty = 3)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999, type = "p",lwd = 3)
png(filename = "./tests/testFiles/figs/plot.addEllipses1", width = 400, height = 400)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"))
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.70, lty = 2)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999, type = "p",lwd = 3)
dev.off()
plot.points(cdaRes, pch =c(18,16), cex = 0.5)
plot.addEllipses(cdaRes, col = c("red", "green"))
plot.points(cdaRes, pch =c(18,16), cex = 0.5, col = c("red", "green"))
plot.addEllipses(cdaRes, col = c("red", "green"))
plot.addEllipses(cdaRes, col = c("red", "green"), lwd = 3)
plot.addEllipses(cdaRes, col = c("red"), lwd = 3)
png(filename = "./tests/testFiles/figs/plot.addEllipses2", width = 400, height = 400)
plot.points(cdaRes, pch =c(18,16), cex = 0.5, col = c("red", "green"))
plot.addEllipses(cdaRes, col = c("red", "green"), lwd = 3)
dev.off()
png(filename = "./tests/testFiles/figs/plot.addEllipses2.png", width = 400, height = 400)
plot.points(cdaRes, pch =c(18,16), cex = 0.5, col = c("red", "green"))
plot.addEllipses(cdaRes, col = c("red", "green"), lwd = 3)
dev.off()
png(filename = "./tests/testFiles/figs/plot.addEllipses1.png", width = 400, height = 400)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"))
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.70, lty = 2)
plot.addEllipses(cdaRes, col = c("red", "green", "blue", "black", "yellow"), probability = 0.999, type = "p",lwd = 3)
dev.off()
library(MorphoTools)
data(centaurea)
centaurea = na.meanSubst(centaurea)
centaurea = delete.population(centaurea, populationName = c("LIP", "PREL"))
result = pca.calc(centaurea)
result$groupMeans
data.frame(result$objects$scores[which(taxon == result$objects$Taxon),  axes[1]],
result$objects$scores[which(taxon == result$objects$Taxon),  axes[2]],
result$col[which(taxon == result$objects$Taxon)])
result$objects$scores
result$objects$Taxon
setValuesForVector <- function(vector, symbols) {
uniques = unique(vector)
for (uniq in uniques) {
levelPos = which( uniques %in% uniq )
while (levelPos > length(symbols)) {
# ak uzivatel zada 2 pch pre 3 taxony, tak pre posledny taxon 3 - 2 a pch bude 1
levelPos = levelPos - length(symbols)
}
#symbolsPositions = which( object$objects$Taxon %in% uniq)
#vector[symbolsPositions == uniq] = symbols[levelPos]
vector = as.character(vector)
vector[vector == uniq] = symbols[levelPos]
vector = as.factor(vector)
}
return(as.character(vector))
}
col = c("red","green","blue","black")
result$objects$Taxon
result$col = setValuesForVector(result$objects$Taxon, col)
data.frame(result$objects$scores[which(taxon == result$objects$Taxon),  axes[1]],
result$objects$scores[which(taxon == result$objects$Taxon),  axes[2]],
result$col[which(taxon == result$objects$Taxon)])
axes = c(1,2)
result$objects$scores[which(taxon == result$objects$Taxon),  axes[1]]
taxon = "hybr "
taxon = "hybr"
data.frame(result$objects$scores[which(taxon == result$objects$Taxon),  axes[1]],
result$objects$scores[which(taxon == result$objects$Taxon),  axes[2]],
result$col[which(taxon == result$objects$Taxon)])
SCORES= data.frame(result$objects$scores[which(taxon == result$objects$Taxon),  axes[1]],
result$objects$scores[which(taxon == result$objects$Taxon),  axes[2]],
result$col[which(taxon == result$objects$Taxon)])
merge(SCORES,result$groupMeans,by="Taxon")
result$groupMean
result$groupMeans
SCORES
View(SCORES)
SCORES= data.frame(result$objects$scores[, axes[1]],
result$objects$scores[, axes[2]],
result$col)
View(SCORES)
axes[1]
paste("axe",axes[1], sep = "")
SCORES= data.frame(paste("axe",axes[1], sep = "") = result$objects$scores[, axes[1]],
paste("axe",axes[2], sep = "") = result$objects$scores[, axes[2]],
"col" = result$col)
paste("axe",axes[1], sep = "")
SCORES= data.frame("axe1" = result$objects$scores[, axes[1]],
"axe2" = result$objects$scores[, axes[2]],
"col" = result$col)
View(SCORES)
result$groupMeans
SCORES= data.frame("Taxon" = result$objects$Taxon,
"axe1" = result$objects$scores[, axes[1]],
"axe2" = result$objects$scores[, axes[2]],
"col" = result$col)
merge(SCORES,result$groupMeans,by="Taxon")
result$groupMeans[axes[1]]
result$groupMeans[axes[1]+1]
scores = data.frame("Taxon" = result$objects$Taxon,
"axe1" = result$objects$scores[, axes[1]],
"axe2" = result$objects$scores[, axes[2]],
"col" = result$col)
centroids = data.frame("Taxon" = result$groupMeans$Taxon,
"cen1" = result$groupMeans[axes[1]+1],
"cen2" = result$groupMeans[axes[2]+1])
merge(scores,centroids,by="Taxon")
taxData = merge(scores,centroids,by="Taxon")
View(taxData)
scores = data.frame("Taxon" = result$objects$Taxon,
"score1" = result$objects$scores[, axes[1]],
"score2" = result$objects$scores[, axes[2]],
"col" = result$col)
taxData = merge(scores,centroids,by="Taxon")
centroids = data.frame("Taxon" = result$groupMeans$Taxon,
"cen1" = result$groupMeans[axes[1]+1],
"cen2" = result$groupMeans[axes[2]+1])
taxData = merge(scores,centroids,by="Taxon")
centroids
result$groupMeans[axes[1]+1]
scores
centroids = data.frame("Taxon" = result$groupMeans$Taxon,
"cen1" = result$groupMeans[axes[1]+1],
"cen2" = result$groupMeans[axes[2]+1])
centroids
centroids = data.frame(result$groupMeans$Taxon, result$groupMeans[axes[1]+1], result$groupMeans[axes[2]+1])
colnames(centroids) = c("Taxon", "cen1", "cen2")
taxData = merge(scores,centroids,by="Taxon")
library(MorphoTools)
data(centaurea)
centaurea = na.meanSubst(centaurea)
centaurea = delete.population(centaurea, populationName = c("LIP", "PREL"))
pcaRes = pca.calc(centaurea)
plot.points(pcaRes, col = c(rgb(255,0,0,max=255,alpha=150), # red
rgb(0,255,0,max=255,alpha=150), # green
rgb(0,0,255,max=255,alpha=150), # blue
rgb(0,0,0,max=255,alpha=150)), # black
legend=F, xlim=c(-5,7.5), ylim = c(-5,5.5))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.points(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addEllipses(pcaRes, col = c("red","green","blue","black"), lwd = 2.5)
library(MorphoTools)
plot.points(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
pops = popul.otu(centaurea)
pcaRes = pca.calc(pops)
plot.points(pcaRes, col = c(rgb(255,0,0,max=255,alpha=150), # red
rgb(0,255,0,max=255,alpha=150), # green
rgb(0,0,255,max=255,alpha=150), # blue
rgb(0,0,0,max=255,alpha=150)), # black
legend=F, xlim=c(-5,7.5), ylim = c(-5,5.5))
plot.points(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addEllipses(pcaRes, col = c("red","green","blue","black"), lwd = 2.5)
result = pca.calc(pops)
col = c("red","green","blue","black")
result$col = setValuesForVector(result$objects$Taxon, col)
setValuesForVector <- function(vector, symbols) {
uniques = unique(vector)
for (uniq in uniques) {
levelPos = which( uniques %in% uniq )
while (levelPos > length(symbols)) {
# ak uzivatel zada 2 pch pre 3 taxony, tak pre posledny taxon 3 - 2 a pch bude 1
levelPos = levelPos - length(symbols)
}
#symbolsPositions = which( object$objects$Taxon %in% uniq)
#vector[symbolsPositions == uniq] = symbols[levelPos]
vector = as.character(vector)
vector[vector == uniq] = symbols[levelPos]
vector = as.factor(vector)
}
return(as.character(vector))
}
result$col = setValuesForVector(result$objects$Taxon, col)
result$col
result$objects$Taxon
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
scores = data.frame("Taxon" = result$objects$Taxon,
"score1" = result$objects$scores[, axes[1]],
"score2" = result$objects$scores[, axes[2]],
"col" = result$col)
axes = c(1,2)
scores = data.frame("Taxon" = result$objects$Taxon,
"score1" = result$objects$scores[, axes[1]],
"score2" = result$objects$scores[, axes[2]],
"col" = result$col)
View(scores)
centroids = data.frame(result$groupMeans$Taxon, result$groupMeans[axes[1]+1], result$groupMeans[axes[2]+1])
colnames(centroids)
colnames(centroids) = c("Taxon", "cen1", "cen2")
colnames(centroids)
taxData = merge(scores, centroids, by="Taxon")
View(taxData)
taxData$cen1
taxData$cen2
scores = data.frame("Taxon" = result$objects$Taxon,
"score1" = result$objects$scores[, axes[1]],
"score2" = result$objects$scores[, axes[2]],
"col" = result$col)
centroids = data.frame(result$groupMeans$Taxon, result$groupMeans[axes[1]+1], result$groupMeans[axes[2]+1])
colnames(centroids) = c("Taxon", "cen1", "cen2")
taxData = merge(scores, centroids, by="Taxon")
View(taxData)
taxData$cen1
taxData$score1
taxData$score2
taxData$col
segments(x0=taxData$cen1, y0=taxData$cen2, x1=taxData$score1 , y1=taxData$score2, col = taxData$col, lwd = lwd, lty = lty, ...)
segments(x0=taxData$cen1, y0=taxData$cen2, x1=taxData$score1 , y1=taxData$score2, col = taxData$col, lwd = lwd, lty = lty
)
segments(x0=taxData$cen1, y0=taxData$cen2, x1=taxData$score1 , y1=taxData$score2, col = taxData$col
)
segments(x0=taxData$cen1, y0=taxData$cen2, x1=taxData$score1 , y1=taxData$score2, bg = taxData$col)
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
segments(x0=taxData$cen1, y0=taxData$cen2, x1=taxData$score1 , y1=taxData$score2, bg = taxData$col)
segments(x0=taxData$cen1, y0=taxData$cen2, x1=taxData$score1 , y1=taxData$score2, col = taxData$col)
levels(pcaRes$objects$Taxon)
levels(pcaRes$groupMeans$Taxon)
pcaRes$groupMeans$Taxon
which(taxon == result$objects$Taxon)
library(MorphoTools)
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
library(MorphoTools)
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
library(MorphoTools)
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
library(MorphoTools)
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
library(MorphoTools)
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
stop()
library(MorphoTools)
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
library(MorphoTools)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
View(taxData)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
result
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
result$col = setValuesForVector(result$objects$Taxon, col)
scores = data.frame("Taxon" = result$objects$Taxon,
"score1" = result$objects$scores[, axes[1]],
"score2" = result$objects$scores[, axes[2]],
"col" = result$col)
centroids = data.frame(result$groupMeans$Taxon, result$groupMeans[axes[1]+1], result$groupMeans[axes[2]+1])
colnames(centroids) = c("Taxon", "cen1", "cen2")
taxData = merge(scores, centroids, by="Taxon")
#for (taxon in levels(result$objects$Taxon))
taxon = "ps"
taxData$col[which(taxon == taxData$Taxon)]
segments(x0=taxData$cen1[which(taxon == taxData$Taxon)], y0=taxData$cen2[which(taxon == taxData$Taxon)],
x1=taxData$score1[which(taxon == taxData$Taxon)] , y1=taxData$score2[which(taxon == taxData$Taxon)],
col = taxData$col[which(taxon == taxData$Taxon)], lwd = lwd, lty = lty, ...)
segments(x0=taxData$cen1[which(taxon == taxData$Taxon)], y0=taxData$cen2[which(taxon == taxData$Taxon)],
x1=taxData$score1[which(taxon == taxData$Taxon)] , y1=taxData$score2[which(taxon == taxData$Taxon)],
col = taxData$col[which(taxon == taxData$Taxon)])
taxData$col[which(taxon == taxData$Taxon)]
segments(x0=taxData$cen1[which(taxon == taxData$Taxon)], y0=taxData$cen2[which(taxon == taxData$Taxon)],
x1=taxData$score1[which(taxon == taxData$Taxon)] , y1=taxData$score2[which(taxon == taxData$Taxon)],
col = as.character(taxData$col[which(taxon == taxData$Taxon)]))
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addEllipses(pcaRes, col = c("green","blue","red", "black"), lwd = 2.5)
plot.addSpiders(pcaRes, col = c("green","blue","red", "black"))
plot.points(pcaRes, col = c("green","blue","red", "black"), legend = T)
plot.addSpiders(pcaRes, col = c("green","blue","red", "black"))
plot.addEllipses(pcaRes, col = c("green","blue","red", "black"), lwd = 2.5)
pcaRes = pca.calc(centaurea)
plot.points(pcaRes, col = c(rgb(255,0,0,max=255,alpha=150), # red
rgb(0,255,0,max=255,alpha=150), # green
rgb(0,0,255,max=255,alpha=150), # blue
rgb(0,0,0,max=255,alpha=150)), # black
legend=F, xlim=c(-5,7.5), ylim = c(-5,5.5))
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.points(pcaRes, col = c(rgb(255,0,0,max=255,alpha=150), # red
rgb(0,255,0,max=255,alpha=150), # green
rgb(0,0,255,max=255,alpha=150), # blue
rgb(0,0,0,max=255,alpha=150)), # black
legend=F, xlim=c(-5,7.5), ylim = c(-5,5.5))
plot.addSpiders(pcaRes, col = c("red","green","blue","black"))
plot.addEllipses(pcaRes, col = c("red","green","blue","black"), lwd = 2.5)
plot.points(pcaRes, col = c("red","green","blue","black"), legend = T)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"), type = "p")
plot.addSpiders(pcaRes, col = c("red","green","blue","black"), type = "s")
plot.addSpiders(pcaRes, col = c("red","green","blue","black"), type = "h")
data(centaurea)
centaurea = na.meanSubst(centaurea)
centaurea = delete.population(centaurea, populationName = c("LIP", "PREL"))
pcaRes = pca.calc(centaurea)
plot.points(pcaRes, col = c(rgb(255,0,0,max=255,alpha=150), # red
rgb(0,255,0,max=255,alpha=150), # green
rgb(0,0,255,max=255,alpha=150), # blue
rgb(0,0,0,max=255,alpha=150)), # black
legend=F, xlim=c(-5,7.5), ylim = c(-5,5.5))
plot.addLegend(pcaRes, col = c("red","green","blue","black"), ncol = 2)
plot.addEllipses(pcaRes, col = c("red","green","blue","black"), lwd = 3)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"), type = "h")
plot.points(pcaRes, col = c(rgb(255,0,0,max=255,alpha=150), # red
rgb(0,255,0,max=255,alpha=150), # green
rgb(0,0,255,max=255,alpha=150), # blue
rgb(0,0,0,max=255,alpha=150)), # black
legend=F, xlim=c(-5,7.5), ylim = c(-5,5.5))
plot.addLegend(pcaRes, col = c("red","green","blue","black"), ncol = 2)
plot.addSpiders(pcaRes, col = c("red","green","blue","black"), type = "h")
library(testthat)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
cdaRes = cda.calc(centaurea)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
expect_error(plot.addSpiders(cdaRes, axes = 1), "you have to specifi 2 axes (e.g., axes = c(1,2))", fixed = TRUE)
expect_error(plot.addSpiders(cdaRes, axes = c(1,5)), "specified axes are out of bounds. Object has only 3 axes.")
cdaRes = cda.calc(morphoMockup)
function (object, class2)
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = c(1,3,4,6,1,7,12,8),
"Ch2" = c(11, 12,42,12,32,11,22,18)))
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = c(1,3,4,6,1,7,12,8),
"Ch2" = c(11, 12,42,12,32,11,22,18)))
# Class "morphodata"
morphodataFromDataFrame <- function(indata) {
# check for required columns
if(!("ID" %in% colnames(indata)) | !("Population" %in% colnames(indata)) | !("Taxon" %in% colnames(indata)))
stop("input do not contains required columns", call. = F)
data = list(
"ID" = as.factor(indata$ID),
"Population" = as.factor(indata$Population),
"Taxon" = as.factor(indata$Taxon),
"data" = as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID))
)
if (dim(indata)[2] == 4) {
colnames(data$data) = colnames(indata)[4]
}
#testuj ci tam nie je nejaky nezmysel .. slovo v cislach etc   .  cislo ako pop?
if (!(is.numeric(as.matrix(data$data)))) stop("input contains non-numeric data", call. = F)
attr(data, "class") <- "morphodata"
return(data)
}
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
cdaRes = cda.calc(morphoMockup)
expect_error(plot.addSpiders(cdaRes), "The method plot.addEllipses() is not applicable to histogram.", fixed = TRUE)
expect_error(plot.addSpiders(cdaRes), "The method plot.addSpiders() is not applicable to histogram.", fixed = TRUE)
pcaRes = pca.calc(centaurea)
expect_error(plot.addEllipses(pcaRes, axes = 1), "you have to specifi 2 axes (e.g., axes = c(1,2))", fixed = TRUE)
expect_error(plot.addEllipses(pcaRes, axes = c(1,45)), "specified axes are out of bounds. Object has only 25 axes.")
cdaRes = cda.calc(centaurea)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addSpiders(cdaRes, col = c("red", "green", "blue", "black", "yellow"))
plot.addSpiders(cdaRes, col = c("red", "green", "blue", "black", "yellow"), lty = 2)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addSpiders(cdaRes, col = c("red", "green", "blue", "black", "yellow"), lty = 2)
plot.addSpiders(cdaRes, col = c("red", "green", "blue", "black", "yellow"), lty = 2, lwd = 2)
png(filename = "./tests/testFiles/figs/plot.addSpiders1.png", width = 400, height = 400)
plot.points(cdaRes, pch =c(18,16), col = c("red", "green", "blue", "black", "yellow"), cex = 0.5)
plot.addSpiders(cdaRes, col = c("red", "green", "blue", "black", "yellow"), lty = 2, lwd = 2)
dev.off()
plot.points(cdaRes, pch =c(18,16), cex = 0.5, col = c("red", "green"))
plot.addSpiders(cdaRes, col = c("green", "red"))
png(filename = "./tests/testFiles/figs/plot.addSpiders2.png", width = 400, height = 400)
plot.points(cdaRes, pch =c(18,16), cex = 0.5, col = c("red", "green"))
plot.addSpiders(cdaRes, col = c("green", "red"))
dev.off()
plot.points(pcaRes, pch =c(18,16), cex = 0.5, col = c("red", "green", "blue", "black", "yellow"))
plot.addSpiders(pcaRes, col=c(rgb(255,0,0,max=255,alpha=100),  rgb(0, 0, 255, max = 255, alpha = 100)), lwd = 3)
png(filename = "./tests/testFiles/figs/plot.addSpiders3.png", width = 400, height = 400)
plot.points(pcaRes, pch =c(18,16), cex = 0.5, col = c("red", "green", "blue", "black", "yellow"))
plot.addSpiders(pcaRes, col=c(rgb(255,0,0,max=255,alpha=100),  rgb(0, 0, 255, max = 255, alpha = 100)), lwd = 3)
dev.off()
plot.points(pcaRes, col = c("red", "green", "blue","black",legend=T)
)
plot.points(pcaRes, col = c("red", "green", "blue","black",legend=T))
plot.addSpiders(pcaRes,  col = c(rgb(255,0,0,max=255,alpha=150), # red
rgb(0,255,0,max=255,alpha=150), # green
rgb(0,0,255,max=255,alpha=150), # blue
rgb(0,0,0,max=255,alpha=150))) # black
plot.points(pcaRes, col = c("red", "green", "blue","black",legend=T), cex = 0.4)
plot.addSpiders(pcaRes,  col = c(rgb(255,0,0,max=255,alpha=150), # red
rgb(0,255,0,max=255,alpha=150), # green
rgb(0,0,255,max=255,alpha=150), # blue
rgb(0,0,0,max=255,alpha=150))) # black
setwd("/home/mint/Documents/Cardamine_Turecko_Kaukaz/phasing/AlleleSorting")
source("./functions.R")
options(scipen = 999)
# GLOBAL atguments
samples_2x_file <- "2xSamples"
samples_4x_file <- "4xSamples"
Parent_A = "amaraLazica"
between_homeolog_distance = 2
max_dissimilarity_of_homeologs = 99999
use_between_parents_distance = FALSE
between_parents_distance = 2
#res = paste("fazovanie_vociAmaraLazica/between_homeolog_distance_", between_homeolog_distance, "_between_parents_distance_", use_between_parents_distance,"_",between_parents_distance, "_max_dissimilarity_of_homeologs_", max_dissimilarity_of_homeologs, sep = "")
res="fazovanie_vociAmaraLazica/between_homeolog_distance_2"
# read and parse parents, samples, and patterns
{
pp = read.delim(samples_2x_file, header = F, sep = ":", row.names = 1, stringsAsFactors = FALSE )
samples2x = list()
for (p in 1:length(row.names(pp))) {
if (length(strsplit(pp$V2[p], split = ",")[[1]]) == "1") {
eval(parse (
text =  paste("samples2x$", row.names(pp)[p], " = c(\"", pp$V2[p], "\")", sep = "")
))
next
}
eval(parse (text =  paste(
"samples2x$",
row.names(pp)[p],
" = ",
paste(strsplit(pp$V2[p], split = ","), sep = "\", \""),
sep = ""
)))
}
rm(pp)
samples4x = read.delim(
samples_4x_file,
sep = ",",
header = F,
stringsAsFactors = FALSE
)
# eval(parse( text =  paste("parent_A = samples2x$",Parent_A, sep = "")))
}
library(ape)
library(seqinr)
library(filelock)
library(parallel)
#NAME=paste("between_homeolog_distance_", between_homeolog_distance, "_between_parents_distance_", use_between_parents_distance, "_", between_parents_distance, "_max_dissimilarity_of_homeologs_", max_dissimilarity_of_homeologs, "_BS10", sep = "")
NAME="between_homeolog_distance_2"
# set local atguments
seqDir = "../supercontigs+exony_78_precistene_fazovane_seq/"
#treeDir = "../supercontigs+exony_78_precistene_fazovane_trees/"
#treeDir = "../supercontigs+exony_78_precistene_fazovane_trees_BS20/"
treeDir = "../supercontigs+exony_78_precistene_fazovane_trees_BS10/"
#patterns_exonsFile = "patterns_exons+1000genov"
patterns_exonsFile = "patterns_exons"
#if_below_treshold = "mask"  # "mask" or "remove"
if_below_treshold = "remove"  # "mask" or "remove"
ResDir  = paste(res, "/1_AB_Homeologs_exons_seq", NAME, sep = "")
logfile = paste(res, "/1_AB_Homeologs_exons_seq", NAME, "/1_AB_Homeologs_exons_seq", NAME, ".log", sep = "")
dir.create(ResDir, recursive = TRUE)
patterns_exons = read.delim(patterns_exonsFile, header = FALSE,  stringsAsFactors = FALSE)
cat("", samples4x$V1, sep = "\t", file = logfile)
# using multiple threads
mclapply(patterns_exons$V1, sortAllels, treeDir = treeDir, seqDir = seqDir, resdir = ResDir, samples2x = samples2x, samples4x = samples4x, Parent_A = Parent_A, if_below_treshold = if_below_treshold, between_homeolog_distance = between_homeolog_distance, max_dissimilarity_of_homeologs = max_dissimilarity_of_homeologs, logfile = logfile, mc.cores = 4)
between_homeolog_distance = 6
#res = paste("fazovanie_vociAmaraLazica/between_homeolog_distance_", between_homeolog_distance, "_between_parents_distance_", use_between_parents_distance,"_",between_parents_distance, "_max_dissimilarity_of_homeologs_", max_dissimilarity_of_homeologs, sep = "")
res="fazovanie_vociAmaraLazica/between_homeolog_distance_6"
#NAME=paste("between_homeolog_distance_", between_homeolog_distance, "_between_parents_distance_", use_between_parents_distance, "_", between_parents_distance, "_max_dissimilarity_of_homeologs_", max_dissimilarity_of_homeologs, "_BS10", sep = "")
NAME="between_homeolog_distance_6"
ResDir  = paste(res, "/1_AB_Homeologs_exons_seq", NAME, sep = "")
logfile = paste(res, "/1_AB_Homeologs_exons_seq", NAME, "/1_AB_Homeologs_exons_seq", NAME, ".log", sep = "")
dir.create(ResDir, recursive = TRUE)
patterns_exons
cat("", samples4x$V1, sep = "\t", file = logfile)
# using multiple threads
mclapply(patterns_exons$V1, sortAllels, treeDir = treeDir, seqDir = seqDir, resdir = ResDir, samples2x = samples2x, samples4x = samples4x, Parent_A = Parent_A, if_below_treshold = if_below_treshold, between_homeolog_distance = between_homeolog_distance, max_dissimilarity_of_homeologs = max_dissimilarity_of_homeologs, logfile = logfile, mc.cores = 4)
usethis::use_readme_rmd()
news(package = "MorphoTools2")
utils::news()
use_r("zzz")
utils::use_r("zzz")
usethis::use_r("zzz")
devtools::install_github("GuangchuangYu/treeio")
library(treeio)
library(MorphoTools2)
library(MorphoTools2)
library(MorphoTools2)
library(MorphoTools2)
library(MorphoTools2)
