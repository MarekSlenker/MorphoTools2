sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
rm(kselj)
rm(kselj)
q
q
aa
q
a
das
q
we
q
we
wq
fwe
gfew
rš
č
ľ
ľ
šr
ew
f
)
rm(kselj)
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj
str(kselj)
kselj = numeric()
ksel = numeric()
ksel<-rbind(ksel,kselj)
ksel
ksel
ksel = numeric()
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(object$Taxon == knn.samp))
})
kselj
ksel
rbind(ksel,kselj)
ksel =rbind(ksel,kselj)
ksel =rbind(ksel,kselj)
ksel =rbind(ksel,kselj)
ksel =rbind(ksel,kselj)
ksel
res = numeric()
levels(object$Population)
i = "BABL"
samp = keepByColumn(object, "Population", pop)
samp$Taxon == knn.samp
sum(samp$Taxon == knn.samp)
knn.samp
train = removeByColumn(object, "Population", pop)
knn.samp = knn(train = train, test = samp, cl = train$Taxon, k = k)
samp = keepByColumn(object, "Population", pop)
train = removeByColumn(object, "Population", pop)
pop
pop = "BABL"
samp
samp = keepByColumn(object, "Population", pop)
train = removeByColumn(object, "Population", pop)
knn.samp = knn(train = train, test = samp, cl = train$Taxon, k = k)
train
pop
pop
k
length(train$Taxon)
length(samp$Taxon)
length(object$Taxon)
dim(train$data)
knn(train = train, test = samp, cl = train$Taxon, k = k)
knn(train = train$data, test = samp$data, cl = train$Taxon, k = k)
knn.samp = knn(train = train$data, test = samp$data, cl = train$Taxon, k = k)
knn.samp
k
k = 8
knn(train = train$data, test = samp$data, cl = train$Taxon, k = k)
knn.samp = knn(train = train$data, test = samp$data, cl = train$Taxon, k = k)
sum(samp$Taxon == knn.samp)
samp$Taxon == knn.samp
samp$Taxon
knn.samp
samp$Taxon == knn.samp
str(knn.samp)
sum(as.character(samp$Taxon) == as.character(knn.samp))
as.character(samp$Taxon) == as.character(knn.samp)
k = as.numeric(1:30)
sapply(k, FUN = function(k){
res = numeric()
for (pop in levels(object$Population)) {
samp = keepByColumn(object, "Population", pop)
train = removeByColumn(object, "Population", pop)
knn.samp = knn(train = train$data, test = samp$data, cl = train$Taxon, k = k)
resPop = sum(as.character(samp$Taxon) == as.character(knn.samp))
res<-sum(res,resPop)
}
return(res) })
ksel
apply(ksel,2,mean)
kselmean = apply(ksel, MARGIN = 2, FUN = mean)
kselmax = apply(ksel, MARGIN = 2, FUN = max)
kselmin = apply(ksel, MARGIN = 2, FUN = min)
plot(kselmean,type="p",pch=16,xlab="K",ylab="correct classifications", ylim=c(min(kselmin),max(kselmax)))
which(kselmean==max(kselmean))
cat("The optimal K is:")
cat(which(kselmean==max(kselmean)))
print("The optimal K is:")
cat(which(kselmean==max(kselmean)))
k[-1]
k = as.numeric(2:30)
for (j in 1:10){
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(as.character(object$Taxon) == as.character(knn.samp)))
})
ksel = rbind(ksel,kselj)
}
k = as.numeric(1:30)
for (j in 1:10){
kselj = sapply(k, FUN = function(k){
knn.samp = knn.cv(train = object$data,cl =  object$Taxon, k = k, prob = F, use.all = T)
return(sum(as.character(object$Taxon) == as.character(knn.samp)))
})
ksel = rbind(ksel,kselj)
}
ksel
kselmean = apply(ksel, MARGIN = 2, FUN = mean)
kselmax = apply(ksel, MARGIN = 2, FUN = max)
kselmin = apply(ksel, MARGIN = 2, FUN = min)
plot(kselmean,type="p",pch=16,xlab="K",ylab="correct classifications", ylim=c(min(kselmin),max(kselmax)))
sapply(k[-1],function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.07))
sapply(k[-1],function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.07))
sapply(k,function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.07))
kselmin[x]
k = 8
kselmin[k]
sapply(k[-1],function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.7))
plot(kselmean,type="p",pch=16,xlab="K",ylab="correct classifications", ylim=c(min(kselmin),max(kselmax)))
sapply(k[-1],function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.7))
sapply(k[-1],function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.07))
k = as.numeric(1:30)
sapply(k[-1],function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.7))
sapply(k[-1],function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.07))
plot(kselmean,type="p",pch=16,xlab="K",ylab="correct classifications", ylim=c(min(kselmin),max(kselmax)))
sapply(k[-1],function(x) arrows(x, kselmin[x], x, kselmax[x], code = 3, angle = 90, length = 0.07))
cat("The optimal K is:",which(kselmean==max(kselmean)))}
checkClass <- function(object, class) {
if (! (is(object, class))) stop(paste("object is not of class '", class, "' ", sep = ""), call. = F)
}
checkClass(ss, "data.frame")
checkClass(ss, "datas.frame")
checkClass(ss, "data.frame")
ss
aa
object = ss
object[,3:4]
table(object$Taxon, object$Classif)
table(object[,3:4])
object[,3:4]
table(object[,3:4])
data.frame(unclass(classif))
classif = table(object$Taxon, object$Classif)
data.frame(unclass(classif))
data.frame("Taxon" = attr(classif,"row.names"), classif, row.names=NULL)
classif = table(object$Taxon, object$Classif)
classif = data.frame(unclass(classif))
classif = data.frame("Taxon" = attr(classif,"row.names"), classif, row.names=NULL)
classif
rowSums(classif[2:ncol(classif)])
93  + 0 + 22+  5
classif$N = rowSums(classif[2:ncol(classif)])
classif
aggregate(Correct ~ Taxon, data = object, sum)
merge(classif,ncor)
ncor = aggregate(Correct ~ Taxon, data = object, sum)
merge(classif,ncor)
classif[1,]
classif = merge(classif, ncor)
classif[1,]
last = classif[1,]
last[1]<-"Total"
last
length(last)
colSums(classif[2:ncol(classif)])
last[2:length(last)] = colSums(classif[2:ncol(classif)])
last
classif = rbind(classif, last)
classif
ncol(classif)
names(classif)[ncol(classif)]<-"percent.correct"
classif
classif$percent.correct = with(classif,(percent.correct/N)*100)
classif
object
level = "Taxon"
classif = table(object$Taxon, object$Classif)
classif = data.frame(unclass(classif))
data.frame(level = attr(classif,"row.names"), classif, row.names = NULL)
assign(level)
assign(x = level, value = "ds")
level
x
ss= classifda.lda(data, crossval = "popo")
ss= classifda.lda(data, crossval = "pop")
ss
object = ss
unique(object[,c(2,3)])
classif
classif = table(object$Population, object$Classif)
classif<-data.frame(unclass(classif))
classif = data.frame(level = attr(classif,"row.names"), classif, row.names = NULL)
classif
rowSums(classif[2:ncol(classif)])
classif
tax
unique(object[,c(2,3)])
classif
table(object$Population, object$Classif)
classif = table(object$Population, object$Classif)
object[,c(2,3)]
unique(object[,c(2,3)])
tax = unique(object[,c(2,3)])
classif = table(object$Population, object$Classif)
tax = unique(object[,c(2,3)])
classif
tax
classif = merge(tax,classif)
classif
unique(object[,c(2,3)])
tax = unique(object$Population, object$Taxon)
tax
unique(object$Population, object$Taxon)
unique(object$Taxon, object$Population)
unique(object[,c(2,3)])
merge(tax,classif, by = "Taxon")
table(object$Population, object$Classif)
classif = table(object$Population, object$Classif)
classif
classif = as.data.frame(table(object$Population, object$Classif))
classif
object$Classif
object$Population
table(object$Population, object$Classif)
as.data.frame(table(object$Population, object$Classif))
classif = table(object$Population, object$Classif)
classif
tax = unique(object[,c(2,3)])
merge(tax,classif)
classif = table(object$Population, object$Classif)
classif
data.frame(unclass(classif))
classif = data.frame(unclass(classif))
classif = data.frame(level = attr(classif,"row.names"), classif, row.names = NULL)
classif
merge(tax,classif)
classif = table(object$Population, object$Classif)
classif
classif = data.frame(unclass(classif))
classif = data.frame(level = attr(classif,"row.names"), classif, row.names = NULL)
unique(object[,c(2,3)])
tax<-unique(object[,c(2,3)])
merge(tax,classif)
tax
object
ss= classifda.lda(data)
object = ss
classif = table(object$Taxon, object$Classif)
classif = data.frame(unclass(classif))
classif = data.frame("Taxon" = attr(classif,"row.names"), classif, row.names = NULL)
classif$N = rowSums(classif[2:ncol(classif)])
ncor = aggregate(Correct ~ Taxon, data = object, sum)
classif = merge(classif, ncor)
last = classif[1,]
last[1] = "Total"
last[2:length(last)] = colSums(classif[2:ncol(classif)])
classif = rbind(classif, last)
names(classif)[ncol(classif)] = "percent.correct"
classif$percent.correct = with(classif,(percent.correct/N)*100)
classif
ss= classifda.lda(data, crossval = "pop")
object = ss
classif = table(object$Population, object$Classif)
classif<-data.frame(unclass(classif))
classif = data.frame(Population=attr(classif,"row.names"),classif,row.names=NULL)
tax = unique(object[,c(2,3)])
merge(tax, classif)
classif = merge(tax, classif)
rowSums(classif[3:ncol(classif)])
classif$N<-rowSums(classif[3:ncol(classif)])
classif
ncor = aggregate(Correct ~ Population, data = object, sum)
ncor
classif = merge(classif, ncor)
names(classif)[ncol(classif)]<-"percent.correct"
classif$percent.correct<-with(classif,(percent.correct/N)*100)
classif
library(MorphoTools)
ss= classifda.lda(data)
knn.select(data)
classif.matrix(ss)
classif.matrix(ss, level = "Population")
ss= classifda.lda(data)
classif.matrix(ss)
ss= classifda.lda(data, crossval = "pop")
classif.matrix(ss)
classif.matrix(ss, level = "Population")
ss = classifda.knn(data, k = 11)
classif.matrix(ss)
classif.matrix(ss, level = "Population")
ss = classifda.knn(data, k = 11, crossval = "pop")
classif.matrix(ss)
classif.matrix(ss, level = "Population")
classif.matrix(ss)
ss = classifda.knn(data, k = 11, crossval = "indiv")
classif.matrix(ss)
export.res(ss, file = "ddd.txt")
sa = classif.matrix(ss)
export.res(sa, file = "ddd.txt")
object
library(MorphoTools)
ss= classifda.lda(data)
class(ss)
object = ss
as.data.frame(object)
attr(object, "class") <- "data.frame"
class(ss)
library(MorphoTools)
export.res(sa, file = "ddddsa.txt")
ss= classifda.lda(data)
export.res(ss, file = "ddddsa.txt")
ss
library(MorphoTools)
export.res(ss, file = "ddddsa.txt")
class(ss)
class(sa)
export.res(sa, file = "ddddsa.txt")
object
checkClass(object, "classifdata")
object = ss
checkClass(object, "classifdata")
order(object$Taxon,object$Population)
ordr = order(object$Taxon,object$Population)
ordr
library(MorphoTools)
data = read.morphodata("clipboard")
data
ss= classifda.lda(data)
ss
classif.matrix(ss)
ss
library(MorphoTools)
classif.matrix(ss)
library(MorphoTools)
classif.matrix(ss)
library(MorphoTools)
classif.matrix(ss)
ss
print.classifdata <- function(object) {
attr(object, "class") <- "data.frame"
print(object)
}
ss
classifda.lda(data)
data = read.morphodata("clipboard")
classifda.lda(data, crossval = "pop")
classifda.lda(data, crossval = "indiv")
library(MorphoTools)
classifda.lda(data, crossval = "indiv")
library(MorphoTools)
classifda.lda(data, crossval = "indiv")
library(MorphoTools)
classifda.lda(data)
library(MorphoTools)
classifda.lda(data)
library(MorphoTools)
classifda.lda(data)
classifda.lda(data, crossval = "pop")
library(MorphoTools)
classifda.lda(data)
library(MorphoTools)
classifda.lda(data)
library(MorphoTools)
library("MorphoTools", lib.loc="~/R/win-library/3.6")
library("MorphoTools", lib.loc="~/R/win-library/3.6")
library("MorphoTools", lib.loc="~/R/win-library/3.6")
library(car, lib.loc = "E:/Rlib")
library(carData, MorphoTools, lib.loc = "E:/Rlib")
library(car, lib.loc = "E:/Rlib")
library(heplots, lib.loc = "E:/Rlib")
library(plot3D, lib.loc = "E:/Rlib")
library(MorphoTools, lib.loc = "E:/Rlib")
library(candisc, lib.loc = "E:/Rlib")
library(MorphoTools, lib.loc = "E:/Rlib")
library(MorphoTools)
read.morphodata("clipboard")
data = read.morphodata("clipboard")
pcaRes = pca.calc(data)
plot(pcaRes)
plot.points(pcaRes)
plot.points(pcaRes, col = c("red", "green"))
plot.points(pcaRes, col = c("red", "green"), legend = T)
cdaRes = cda.calc(data)
plot.points(cdaRes)
plot.points(cdaRes, col = c("red", "green"), legend = T)
classifda.lda(cdaRes)
classifda.lda(data)
class = classifda.lda(data)
classif.matrix(class)
class = classifda.lda(data, crossval = "pop")
class = classifda.lda(data, crossval = "popo")
class = classifda.lda(data, crossval = "pop")
classif.matrix(class)
classif.matrix(class, level = "pop")
classif.matrix(class, level = "Population")
knn.select(data)
classifda.knn(data)
classifda.knn(data, 11)
classknn = classifda.knn(data, 11)
classif.matrix(classknn)
