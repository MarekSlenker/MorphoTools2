classif<-with(xdata,xdata[Population!=i,3])
knn.samp<-knn(train,samp,classif,k=K,prob=T,use.all=T)
resi<-data.frame(ID=samp.a$ID,Population=samp.a$Population,Taxon=samp.a$Taxon,
Classif=knn.samp,Prob=attr(knn.samp,"prob"))
res<-rbind(res,resi)}}
res$Correct<-as.character(res$Taxon)==as.character(res$Classif)
return(res)}
# ----------------------------------------------------------------------------------------
knn.samp<-function(SAMPLE,TRAINING,K){
require(class)
xsamp<-na.omit(SAMPLE)
samp<-scale(xsamp[,-(1:3)])
xtrain<-na.omit(TRAINING)
train<-scale(xtrain[,-(1:3)])
classif<-xtrain[,3]
knn.samp<-knn(train,samp,classif,k=K,prob=T,use.all=T)
res<-data.frame(ID=xsamp$ID,Population=xsamp$Population,Taxon=xsamp$Taxon,
Classif=knn.samp,Prob=attr(knn.samp,"prob"))
res$Correct<-as.character(res$Taxon)==as.character(res$Classif)
return(res)}
results<-discr.calc(data)
export.res(data, file = "data.txt" )
MorphoTools::export.res(data, file = "data.txt" )
kk = read.delim("clipboard")
View(kk)
results<-discr.calc(kk)
results
discr.sum(results)
coefficients<-discr.coef(results)
coefficients
dscores<-discr.scores(results,kk)
dscores
library(datasets)
data(iris)
data(iris)
summary(iris)
aov(formula = . ~ Species, data = iris)
aov(formula = Petal.Length ~ Species, data = iris)
summary(aov(formula = Petal.Length ~ Species, data = iris))
d = as.matrix(iris)
x = lm(d ~ iris$Species)
x = lm(d ~ Species, data = iris)
iris[,]
iris[,-5]
d = as.matrix(iris[,-5])
x = lm(d ~ Species, data = iris)
x
cda = candisc(x, term="Species")
cda$eigenvalues
cda
cda$structure
cda$coeffs.raw
data("centaurea")
objectWithPassiveSamples = delete.taxon(centaurea, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon, x = T, offset = 15)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon, x = T)
cda_NoPassiveSamples = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda_NoPassiveSamples = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
View(cda_NoPassiveSamples)
aggregate(cda$scores, by = list("Taxon" = iris$Species), mean)
cda$scores
iris$Species
aggregate(cda$scores, by = list("Taxon" = iris$Species), mean)
plot(cda$scores)
plot(cda$scores$Can1, cda$scores$Can2)
cda$scores$Can1
# calculate with objectNoPassiveSamples
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
x_WithPassiveSamples = lm(d_WithPassiveSamples ~ objectWithPassiveSamples$Taxon)
cda_WithPassiveSamples = candisc(x_WithPassiveSamples, term="objectWithPassiveSamples$Taxon")
export.res(cda_WithPassiveSamples$scores, row.names = T)
export.res(cda_WithPassiveSamples, row.names = T)
export.res(cda_WithPassiveSamples$coeffs.raw, row.names = T)
export.res(objectWithPassiveSamples, row.names = T)
scale(objectWithPassiveSamples$data, center = T, scale = F)
View(cda_WithPassiveSamples)
out1=lda(Species~., iris)
View(out1)
predict(out1, iris)
scores=predict(out1, iris)$x
scores
export.res(scores)
export.res(cda$scores)
out1
View(x_WithPassiveSamples)
x_NoPassiveSamples$coefficients
export.res(x_NoPassiveSamples$coefficients, row.names = T)
export.res(x_NoPassiveSamples$residuals, row.names = T)
x_NoPassiveSamples$residuals
x_NoPassiveSamples$effects
x_NoPassiveSamples$rank
x_NoPassiveSamples$fitted.values
x_NoPassiveSamples$assign
x_NoPassiveSamples$model
View(x_WithPassiveSamples)
newdata = iris
object = out1
object$prior
prior = object$prior
if (!inherits(object, "lda"))
inherits(object, "lda")
)
inherits(object, "lda")
if (!inherits(object, "lda"))
stop("object not of class \"lda\"")
i
object$terms
Terms <- object$terms
Terms
missing(newdata)
is.null(dim(newdata))
x <- as.matrix(newdata)
ncol(x) != ncol(object$means)
ncol(x)
ncol(object$means)
length(colnames(x))
0L && any(colnames(x) != dimnames(object$means)[[2L]])
0L
dimnames(object$means)[[2L]]
colnames(x)
ng <- length(object$prior)
missing(prior)
any(prior < 0) || round(sum(prior), 5) != 1
(prior * object$means)
object$means
means <- colSums(prior * object$means)
object$scaling
lda(objectWithPassiveSamples$Taxon ~ objectWithPassiveSamples$data)
objectWithPassiveSamples$data
lda(objectWithPassiveSamples$Taxon ~ d_WithPassiveSamples)
dd = lda(objectWithPassiveSamples$Taxon ~ d_WithPassiveSamples)
dd$prior
dd$counts
dd$means
dd$lev
View(dd)
export.res(dd$scaling, row.names = T)
object$scaling
scaling <- object$scaling
scale(x, center = means, scale = FALSE) %*% scaling
x <- scale(x, center = means, scale = FALSE) %*% scaling
x
scaling
sc_objectWithPassiveSamples = scale(objectWithPassiveSamples$data, center = means, scale = FALSE)
scale(objectWithPassiveSamples$data, center = T, scale = FALSE)
sc_objectWithPassiveSamples = scale(objectWithPassiveSamples$data, center = T, scale = FALSE) %*% dd$scaling
View(sc_objectWithPassiveSamples)
View(cda_WithPassiveSamples)
cda_WithPassiveSamples[["scores"]][["Can1"]]
scale(objectWithPassiveSamples$data, center = T, scale = FALSE)
csW = scale(objectWithPassiveSamples$data, center = T, scale = FALSE)
csN = scale(objectNoPassiveSamples$data, center = T, scale = FALSE)
export.res(scN)
export.res(csN)
export.res(csW)
export.res(csN)
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda_NoPassiveSamples = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
d_WithPassiveSamples
out1=lda(objectWithPassiveSamples$Taxon ~ d_WithPassiveSamples)
scores=predict(out1, d_WithPassiveSamples)$x
scores=predict(out1, objectWithPassiveSamples)$x
scores=predict(out1, objectWithPassiveSamples$data)$x
scores
export.res(scores, row.names = T)
export.res(cda_NoPassiveSamples$scores, row.names = T)
cda_NoPassiveSamples$coeffs.raw * cda_NoPassiveSamples$scores
cda_NoPassiveSamples$coeffs.raw * objectNoPassiveSamples$data
dim(objectNoPassiveSamples$data)
dim(cda_NoPassiveSamples$coeffs.raw)
dim(cda_NoPassiveSamples$coeffs.raw)
objectNoPassiveSamples$data %*% cda_NoPassiveSamples$coeffs.raw
cda_NoPassiveSamples$coeffs.raw
t(cda_NoPassiveSamples$coeffs.raw)
objectNoPassiveSamples$data
objectNoPassiveSamples$data %*% t(cda_NoPassiveSamples$coeffs.raw)
objectNoPassiveSamples$data * t(cda_NoPassiveSamples$coeffs.raw)
d_NoPassiveSamples$data %*% cda_NoPassiveSamples$coeffs.raw
d_NoPassiveSamples %*% cda_NoPassiveSamples$coeffs.raw
d_NoPassiveSamples %*% cda_NoPassiveSamples$coeffs.raw - cda_NoPassiveSamples$scores
d_NoPassiveSamples %*% cda_NoPassiveSamples$coeffs.raw
cda_NoPassiveSamples$scores
cda_NoPassiveSamples$scores[-1,]
cda_NoPassiveSamples$scores[,-1]
d_NoPassiveSamples %*% cda_NoPassiveSamples$coeffs.raw - cda_NoPassiveSamples$scores[,-1]
unique(d_NoPassiveSamples %*% cda_NoPassiveSamples$coeffs.raw - cda_NoPassiveSamples$scores[,-1])
(d_NoPassiveSamples %*% cda_NoPassiveSamples$coeffs.raw - cda_NoPassiveSamples$scores[,-1])[1]
(d_NoPassiveSamples %*% cda_NoPassiveSamples$coeffs.raw - cda_NoPassiveSamples$scores[,-1])[2]
cda
scaleFactor = (d_NoPassiveSamples %*% cda_NoPassiveSamples$coeffs.raw - cda_NoPassiveSamples$scores[,-1])[1]
scaleFactor
cda_NoPassiveSamples$coeffs.raw
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
d_WithPassiveSamples
d_WithPassiveSamples %*% cda$coeffs.raw - scaleFactor
cda$coeffs.raw
d_WithPassiveSamples
cda$coeffs.raw
cda$coeffs.raw
d_NoPassiveSamples
d_NoPassiveSamples %*% cda$coeffs.raw
taxa(d_NoPassiveSamples)
taxa(objectNoPassiveSamples)
taxa(objectNoPassiveSamples)
taxa(objectWithPassiveSamples)
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
d_NoPassiveSamples %*% cda$coeffs.raw
d_NoPassiveSamples
cda$coeffs.raw
(d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1]
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1]
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
d_WithPassiveSamples %*% cda$coeffs.raw - scaleFactor
cda$scores
d_WithPassiveSamples %*% cda$coeffs.raw - scaleFactor
taxa(data)
objectWithPassiveSamples = data
objectNoPassiveSamples = data
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
d_NoPassiveSamples %*% cda$coeffs.raw
cda$scores[,-1]
(d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])
(d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1]
(d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
(d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])
(d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
(d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
objectWithPassiveSamples = data
objectNoPassiveSamples = data
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
scaleFactor
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
d_WithPassiveSamples %*% cda$coeffs.raw - scaleFactor
cda$coeffs.raw
d_WithPassiveSamples %*% cda$coeffs.raw
d_WithPassiveSamples %*% cda$coeffs.raw - scaleFactor
(d_WithPassiveSamples %*% cda$coeffs.raw)
(d_WithPassiveSamples %*% cda$coeffs.raw) %-% scaleFactor
(d_WithPassiveSamples %*% cda$coeffs.raw) - scaleFactor
d_WithPassiveSamples %*% cda$coeffs.raw
apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, scaleFactor, "-")
apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, c(scaleFactor), "-")
apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor})
cdaResult$objects$scores =   apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor})
ee = apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor})
ee
ee = as.data.frame(apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
View(ee)
ee = as.matrix(apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
dim(ee)
ee = (apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
matrix(unlist(ee), nrow=length(ee), byrow=T)
eee = data.frame(matrix(unlist(ee), nrow=length(ee), byrow=T))
cda$coeffs.raw
object$ID
objectNoPassiveSamples
objectWithPassiveSamples = data
objectNoPassiveSamples = data
taxa(data)
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
export.res(cda$scores)
export.res(cda$scores, row.names = T)
cda$coeffs.raw
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
scoreList = (apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
cdaResult$objects$scores = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
export.res(data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T)), row.names = T)
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
export.res(cda$scores, row.names = T)
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
scaleFactor
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
scoreList = (apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
export.res(data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T)), row.names = T)
data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
dd = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
dim(dd)
dim(objectWithPassiveSamples$Taxon)
dim(objectWithPassiveSamples$data)
rownames(dd) = objectWithPassiveSamples$Taxon
objectWithPassiveSamples$Taxon
rownames(dd)
objectWithPassiveSamples$Taxon
rownames(dd) = as.character(objectWithPassiveSamples$Taxon)
dd$taxa = as.character(objectWithPassiveSamples$Taxon)
export.res(dd$taxa)
export.res(as.data.frame(dd$taxa))
dd$id = as.character(objectWithPassiveSamples$ID)
export.res(as.data.frame(dd$id))
library(MorphoTools)
data("centaurea")
taxa(centaurea)
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
plot.points(cdaResNoPas, c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
cdaResNoPas
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
cdaResNoPas$objects$scores
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
cdaResNoPas$objects$scores
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
library(MorphoTools)
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
cdaResNoPas$objects$scores
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
# internal
# returns new pcadata object
newCdadata <- function() {
newCdadata <- list(
objects = list(
ID = factor(),
Population = factor(),
Taxon = factor(),
scores = data.frame()),
eigenValues = numeric(),
axesVariance = numeric(),
cumulativeAxesVariance = numeric(),
groupMeans = data.frame(),
rank = numeric(),
coeffs.std = matrix(),
coeffs.raw = matrix(),
totalCanonicalStructure = matrix(),
canrsq = numeric()
)
attr(newCdadata, "class") <- "cdadata"
return(newCdadata)
}
cdaResult = newCdadata()
cdaResult$objects$scores = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut data
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
scoreList = (apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
cdaResult$objects$scores = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
colnames(cdaResult$objects$scores)
colnames(cda$scores)[-1]
colnames(cdaResult$objects$scores) = colnames(cda$scores)[-1]
colnames(cdaResult$objects$scores)
rownames(cdaResult$objects$scores) = object$ID
library(MorphoTools)
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
cdaResNoPas$objects$scores
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
sum(cdaResNoPas$objects$scores)
str(cdaResNoPas$objects$scores)
View(cdaResNoPas)
hist(cdaResNoPas$objects$scores)
hist(cdaResNoPas$objects$scores$Can1)
hist(as.numeric(cdaResNoPas$objects$scores))
hist(cdaResNoPas$objects$scores[])
hist(cdaResNoPas$objects$scores[1])
hist(cdaResNoPas$objects$scores[,])
hist(cdaResNoPas$objects$scores[,])
cdaResNoPas$objects$scores[,]
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
cdaResNoPas$objects$scores[,]
as.numeric(cdaResNoPas$objects$scores[,])
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = c(-6,4,0.5))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.2))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.1))
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.1))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5))
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
taxa()
taxa(objectWithPassiveSamples)
taxa(objectNoPassiveSamples)
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
# internal
# returns new pcadata object
newCdadata <- function() {
newCdadata <- list(
objects = list(
ID = factor(),
Population = factor(),
Taxon = factor(),
scores = data.frame()),
eigenValues = numeric(),
axesVariance = numeric(),
cumulativeAxesVariance = numeric(),
groupMeans = data.frame(),
rank = numeric(),
coeffs.std = matrix(),
coeffs.raw = matrix(),
totalCanonicalStructure = matrix(),
canrsq = numeric()
)
attr(newCdadata, "class") <- "cdadata"
return(newCdadata)
}
cdaResult = newCdadata()
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut data
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
scoreList = (apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
cdaResult$objects$scores = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
colnames(cdaResult$objects$scores) = colnames(cda$scores)[-1]
rownames(cdaResult$objects$scores) = object$ID
dim(cdaResult$objects$scores)
dim(d_NoPassiveSamples)
dim(objectWithPassiveSamples$data)
dim(objectNoPassiveSamples$data)
dim(cdaResult$objects$scores)
dim(cda$scores)
cda$scores
dim(cdaResWithPas$objects$scores)
dim(objectWithPassiveSamples$data)
cdaResWithPas
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.2), legend = F)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.2), legend = F)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-7,4,0.2), legend = F)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-7,4,0.2), legend = F)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-7,4,0.2), legend = T)
