objectWithITHPassiveSamples.scaled$scores =
export.res(as.data.frame(cda$coeffs.raw), row.names = T )
export.res(as.data.frame(objectWithITHPassiveSamples.scaled[1,]), row.names = T )
objectWithITHPassiveSamples.scaled[1,]
objectWithITHPassiveSamples.scaled
objectWithITHPassiveSamples.scaled = as.matrix( scale(objectWithITHPassiveSamples$data, center = T, scale = F) )
objectWithITHPassiveSamples.scaled
objectWithITHPassiveSamples.scaled[1,]
export.res(as.data.frame(objectWithITHPassiveSamples.scaled[1,]), row.names = T )
objectWithITHPassiveSamples.scaled[1,] %*% cda$coeffs.raw
objectWithITHPassiveSamples.scaled %*% cda$coeffs.raw
objectWithITHPassiveSamples.scaled
scale(objectWithPassiveSamples$data, center = T, scale = F)
objectWithPassiveSamples = object
scale(objectWithPassiveSamples$data, center = T, scale = F)
scale(objectWithPassiveSamples$data, center = T, scale = F) %*% cda$coeffs.raw
groupMeans
cdaResult$groupMeans
cda$means
cda$scores
cda$means
export.res(cda$scores)
d = as.matrix(data$data)
x = lm(d ~ data$Taxon)
cda = candisc(x, term="data$Taxon")
cda$means
export.res(cda$scores)
export.res(cda$scores, file = "./aa.txt")
# predict na zaklade plnej matice
cdaResult$objects$scores = scale(objectWithPassiveSamples$data, center = T, scale = F) %*% cda$coeffs.raw
# internal
# returns new pcadata object
newCdadata <- function() {
newCdadata <- list(
axesVariance = numeric(),
cumulativeAxesVariance = numeric(),
groupMeans = data.frame(),
coeffs.raw = matrix(),
coeffs.std = matrix(),
totalCanonicalStructure = matrix(),
objects = list(
ID = factor(),
Population = factor(),
Taxon = factor(),
scores = data.frame()),
rank = numeric(),
eigenValues = numeric(),
canrsq = numeric()
)
attr(newCdadata, "class") <- "cdadata"
return(newCdadata)
}
objectNoPassiveSamples = object
objectWithPassiveSamples = object
for (groupName in passiveSamples) {
if (groupName %in% object$Taxon) objectNoPassiveSamples = removeByColumn(objectNoPassiveSamples, "Taxon", groupName)
if (groupName %in% object$Population) objectNoPassiveSamples = removeByColumn(objectNoPassiveSamples, "Population", groupName)
}
# calculate with objectNoPassiveSamples
d = as.matrix(objectNoPassiveSamples$data)
x = lm(d ~ objectNoPassiveSamples$Taxon)
cda = candisc(x, term="objectNoPassiveSamples$Taxon")
cdaResult = newCdadata()
cdaResult$rank = cda$rank
cdaResult$eigenValues = cda$eigenvalues
cdaResult$canrsq = cda$canrsq
cdaResult$axesVariance = cda$pct
for (i in cdaResult$rank:1) {
cdaResult$cumulativeAxesVariance[i] = sum(cdaResult$axesVariance[1:i])
}
cdaResult$coeffs.raw = cda$coeffs.raw
cdaResult$coeffs.std = cda$coeffs.std
cdaResult$totalCanonicalStructure = cda$structure
cdaResult$objects$ID = object$ID
cdaResult$objects$Population = object$Population
cdaResult$objects$Taxon = object$Taxon
# predict na zaklade plnej matice
cdaResult$objects$scores = scale(objectWithPassiveSamples$data, center = T, scale = F) %*% cda$coeffs.raw
dim(cdaResult$objects$scores)
length(cdaResult$objects$ID)
length(cdaResult$objects$Taxon)
length(cdaResult$objects$Population)
aggregate(cdaResult$objects$scores,by=cdaResult$objects$Taxon,mean)
aggregate(cdaResult$objects$scores, by = list("Taxon" = cdaResult$objects$Taxon), mean)
str(aggregate(cdaResult$objects$scores, by = list("Taxon" = cdaResult$objects$Taxon), mean))
cda$means
plot.points(cdaResult, pt.bg = c("green", "red", "navy", "orange"), col = c("black", "red", "black", "red"),  legend = F, pch = c(22, 15, 25, 21))
source('C:/Users/mslen/source/Git/MorphoTools/R/cda.calc.R')
a[1]
a = 1
a[1]
a[2]
a[2] = 2
a[4] = 6
a
a = "1"
a[4]
a[4] = "ds"
a
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
cdaResult = cda.calc(data)
library("MorphoTools", lib.loc="~/R/win-library/3.6")
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
cdaResult = cda.calc(data)
taxlev = levels(cdaResult$objects$Taxon)
hist(cdaResult$objects$scores[cdaResult$objects$Taxon == taxlev[1]], plot = F, breaks = breaks )
taxlev[1]
cdaResult$objects$Taxon
cdaResult$objects$scores
cdaResult$objects$scores[cdaResult$objects$Taxon == taxlev[1]]
hist(cdaResult$objects$scores[cdaResult$objects$Taxon == taxlev[1]], plot = F, breaks = breaks )
cdaResult$objects$scores
cdaResult$objects$Taxon == taxlev[1]
cdaResult$objects$scores[cdaResult$objects$Taxon == taxlev[1]]
taxlev
dim(cdaResult$objects$Taxon)
length(cdaResult$objects$Taxon)
length(cdaResult$objects$scores)
dim(cdaResult$objects$scores)
length(cdaResult$objects$Taxon == taxlev[1])
cdaResult$objects$scores[cdaResult$objects$Taxon == taxlev[1]]
cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]]
hist1 = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F, breaks = breaks )
hist1 = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
class(hist)
class(hist1)
histCC[1] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histCC = numeric()
histCC[1] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histCC = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
str(histCC)
histCC = list()
histDD = list()
histDD[1] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histDD = list(list())
histDD[1]
histDD = list()
histDD[1]
histDD = list(list())
histDD[1] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histDD[1]
histDD = list(list(6))
histDD = list(list(),list(),list(),list(),list(),list())
histDD[1] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histDD = list(list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()))
histDD[1] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histDD = list(list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()),list(list(),list(),list(),list(),list(),list()))
histDD[[1]] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histDD = list(list(list(),list(),list(),list(),list(),list()))
histDD[[1]] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histDD[[2]] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
histDD[[3]] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[1]], plot = F)
plot(histDD[[3]])
plot(histDD[[2]])
histDD[[3]]$aaaa = "aaaa"
cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[1]][1]
setValuesForVector <- function(vector, symbols) {
uniques = unique(vector)
for (uniq in uniques) {
levelPos = which( uniques %in% uniq )
while (levelPos > length(symbols)) {
# ak uzivatel zada 2 pch pre 3 taxony, tak pre posledny taxon 3 - 2 a pch bude 1
levelPos = levelPos - length(symbols)
}
#symbolsPositions = which( object$objects$Taxon %in% uniq)
#vector[symbolsPositions == uniq] = symbols[levelPos]
vector = as.character(vector)
vector[vector == uniq] = symbols[levelPos]
vector = as.factor(vector)
}
return(as.character(vector))
}
col = "black"
col = c("black", "red", "yellow")
col = c("black", "red", "yellow", "green")
cdaResult$pt.bg = setValuesForVector(cdaResult$objects$Taxon, col)
cdaResult$pt.bg
cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]]
i = 1
cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]]
cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]][1]
i = 3
cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]]
for (i in 1:lenght(taxlev)) {
histograms[[i]] = hist(cdaResult$objects$scores[cdaResult$objects$Taxon == taxlev[i]], plot = F, breaks = breaks )
histograms[[i]]$pt.bg = cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]][1]
}
for (i in 1:length(taxlev)) {
histograms[[i]] = hist(cdaResult$objects$scores[cdaResult$objects$Taxon == taxlev[i]], plot = F, breaks = breaks )
histograms[[i]]$pt.bg = cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]][1]
}
for (i in 1:length(taxlev)) {
histograms[[i]] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[i]], plot = F, breaks = breaks )
histograms[[i]]$pt.bg = cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]][1]
}
histograms[[i]] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[i]], plot = F )
# struktura pre skladovanie hystogramov
histograms = list(list(list(),list(),list(),list(),list(),list()))
for (i in 1:length(taxlev)) {
histograms[[i]] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[i]], plot = F )
histograms[[i]]$pt.bg = cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]][1]
}
ymax = 0
for (i in 1:length(taxlev)) {
ymax = max( c(ymax, histograms[[i]]$counts))
}
plot(NULL, main="", xlab = "canonical score", ylab = "count", ylim = ylim, axes = F)
# hrajkanie sa s delenim a zvyskom po delenie, aby som nasiel nablizsie cislo delitelne 10
upperLim = ymax  %/% 10; if ((ymax %% 10) > 0) upperLim = upperLim + 1; upperLim = upperLim * 10
ylim = c(0, upperLim)
plot(NULL, main="", xlab = "canonical score", ylab = "count", ylim = ylim, axes = F)
plot.new()
plot.new(xlab = "canonical score", ylab = "count", ylim = ylim)
plot.new()
plot(0, main="", xlab = "canonical score", ylab = "count", ylim = ylim, axes = F)
xhist = hist(cdaResult$objects$scores, plot = F)
xhist = hist(cdaResult$objects$scores$Can1, plot = F)
breaks = xhist$breaks
cdaResult$pt.bg = setValuesForVector(cdaResult$objects$Taxon, col)
# nastav pch, col a pt.bg spravne podla taxonu
cdaResult$col = setValuesForVector(cdaResult$objects$Taxon, "black") # farba prazdneho znaku, samotna farba bude v pt.bg
# struktura pre skladovanie hystogramov
histograms = list(list(list(),list(),list(),list(),list(),list()))
for (i in 1:length(taxlev)) {
histograms[[i]] = hist(cdaResult$objects$scores[cdaResult$objects$Taxon == taxlev[i]], plot = F, breaks = breaks )
histograms[[i]]$pt.bg = cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]][1]
}
for (i in 1:length(taxlev)) {
histograms[[i]] = hist(cdaResult$objects$scores$Can1[cdaResult$objects$Taxon == taxlev[i]], plot = F, breaks = breaks )
histograms[[i]]$pt.bg = cdaResult$pt.bg[cdaResult$objects$Taxon == taxlev[i]][1]
}
ymax = 0
if (is.null(ylim)) {
for (i in 1:length(taxlev)) {
ymax = max( c(ymax, histograms[[i]]$counts))
}
# hrajkanie sa s delenim a zvyskom po delenie, aby som nasiel nablizsie cislo delitelne 10
upperLim = ymax  %/% 10; if ((ymax %% 10) > 0) upperLim = upperLim + 1; upperLim = upperLim * 10
ylim = c(0, upperLim)
}
plot(histograms[[1]], axes = F)
plot.new()
plot(histograms[[1]], axes = F, add = T)
plot(xhist, type = "n", main="", xlab = "canonical score", ylab = "count", ylim = ylim, axes = F)
plot.default(xhist, type = "n", main="", xlab = "canonical score", ylab = "count", ylim = ylim, axes = F)
xhist$breaks
xhist$counts
plot.default(x = xhist$breaks, y = xhist$counts, type = "n", main="", xlab = "canonical score", ylab = "count", ylim = ylim, axes = F)
xhist$density
xhist$mids
plot.default(x = xhist$mids, y = xhist$counts, type = "n", main="", xlab = "canonical score", ylab = "count", ylim = ylim, axes = F)
plot(histograms[[1]], axes = F, add = T)
plot(histograms[[2]], axes = F, add = T)
xhist$counts
ylim
plot(histograms[[1]], axes = F, main="", xlab = "canonical score", ylab = "count", ylim = ylim, axes = F)
plot(histograms[[1]], axes = F, main="", xlab = "canonical score", ylab = "count", ylim = ylim)
plot(histograms[[2]], axes = F, add = T)
histograms[[1]]$counts
histograms[[2]]$counts
histograms[[3]]$counts
histograms[[4]]$counts
histograms[[5]]$counts
ymax = 0
for (i in 1:length(taxlev)) {
ymax = max( c(ymax, histograms[[i]]$counts))
}
ymax
# hrajkanie sa s delenim a zvyskom po delenie, aby som nasiel nablizsie cislo delitelne 10
upperLim = ymax  %/% 10; if ((ymax %% 10) > 0) upperLim = upperLim + 1; upperLim = upperLim * 10
ylim = c(0, upperLim)
plot(histograms[[1]], axes = F, main="", xlab = "canonical score", ylab = "count", ylim = ylim)
plot(histograms[[2]], axes = F, add = T)
plot(histograms[[3]], axes = F, add = T)
plot(histograms[[4]], axes = F, add = T)
plot(histograms[[1]], main="", xlab = "canonical score", ylab = "count", col = histograms[[1]]$pt.bg, ylim = ylim, axes = F, ...)
plot(histograms[[1]], main="", xlab = "canonical score", ylab = "count", col = histograms[[1]]$pt.bg, ylim = ylim, axes = F)
for (i in 2:length(taxlev)) {
plot(histograms[[i]], col = histograms[[i]]$pt.bg, axes = F, add = T)
}
axis(1, at = breaks, labels = breaks, tcl = -0.5)
axis(2, at = seq(ylim[1], ylim[2], 10), labels = seq(ylim[1], ylim[2], 10), tcl=-0.5)
plotLegend(cdaResult, legend.pos, pch = 22, col = unique(cdaResult$col), pt.bg = unique(cdaResult$pt.bg), ncol)
plotLegend <- function(object, legend.pos, pt.bg, pch, col, ncol) {
if (length(legend.pos) == 1) legend(legend.pos,
legend = unique(object$objects$Taxon),
pch = pch,
col = col,
bty="o", pt.bg = pt.bg, ncol = ncol)
if (length(legend.pos) == 2) legend(legend.pos[1], legend.pos[2], legend = unique(object$objects$Taxon),
pch = pch,
col = col,
bty="o", pt.bg = pt.bg, ncol = ncol)
}
plotLegend(cdaResult, legend.pos, pch = 22, col = unique(cdaResult$col), pt.bg = unique(cdaResult$pt.bg), ncol)
legend.pos = "topright"
plotLegend(cdaResult, legend.pos, pch = 22, col = unique(cdaResult$col), pt.bg = unique(cdaResult$pt.bg), ncol)
plotLegend(cdaResult, legend.pos, pch = 22, col = unique(cdaResult$col), pt.bg = unique(cdaResult$pt.bg))
plotLegend(cdaResult, legend.pos, pch = 22, col = unique(cdaResult$col), pt.bg = unique(cdaResult$pt.bg), ncol = 2)
library(MorphoTools)
library("roxygen2", lib.loc="~/R/win-library/3.6")
library(MorphoTools)
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
dataShort = delete.taxon(object = data, taxonName =  c("ph"))
cdaResult = cda.calc(dataShort)
plot.points(cdaResult, col = c("green", "orange"), legend = T, breaks = seq(-6, 4, 0.2), pch = c(22, 15, 25, 21))
plot.points(cdaResult, pt.bg = c("green", "red", "navy", "orange"), col = c("black", "red", "black", "red"),  legend = F, pch = c(22, 15, 25, 21))
plot.points(cdaResult, pt.bg = c("green", "red", "navy", "orange"), col = c("black", "red", "black", "red"),  legend = T, pch = c(22, 15, 25, 21))
labels.points(cdaResult)
pcaRes = pca.calc(dataShort)
plot.points(pcaRes, pt.bg = c("green", "red", "navy", "orange"), col = c("black", "red", "black", "red"),  legend = T, pch = c(22, 15, 25, 21))
labels.points(pcaRes)
plot.points(pcaRes, pt.bg = c("green", "red", "navy", "orange"), col = c("black", "red", "black", "red"),  legend = T, pch = c(22, 15, 25, 21))
plot.characters(pcaRes)
plot.characters(pcaRes, labels = F)
labels.characters(pcaRes)
library(MorphoTools)
labels.characters(pcaRes)
labels.characters(pcaRes, cex = 2)
labels.characters(pcaRes, cex = 2, pos = 2)
cdaResult = cda.calc(dataShort, passiveSamples = "hybr")
plot.points(cdaResult, pt.bg = c("green", "red", "navy", "orange"), col = c("black", "red", "black", "red"),  legend = T, pch = c(22, 15, 25, 21))
plot.points(cdaResult, col = c("black", "red", "white", "red"),  legend = T, pch = c(22, 15, 25, 21))
plot.points(pcaRes, pt.bg = c("green", "red", "navy", "orange"), col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)),  legend = T, pch = c(22, 15, 25, 21))
plot.points(cdaResult, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)),  legend = T, pch = c(22, 15, 25, 21))
plot.points(cdaResult, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)),  legend = T, pch = c(22, 15, 25, 21))
plot.points(cdaResult, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)),  legend = T, pch = c(22, 15, 25, 21))
plot.points(cdaResult, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)),  legend = T)
plot.points(cdaResult, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)),  legend = T, breaks = seq(-6,4,0.5))
plot.points(cdaResult, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)),  legend = T, breaks = seq(-6,3.5,0.5))
unique(cdaResult$col)
cdaResult
setValuesForVector <- function(vector, symbols) {
uniques = unique(vector)
for (uniq in uniques) {
levelPos = which( uniques %in% uniq )
while (levelPos > length(symbols)) {
# ak uzivatel zada 2 pch pre 3 taxony, tak pre posledny taxon 3 - 2 a pch bude 1
levelPos = levelPos - length(symbols)
}
#symbolsPositions = which( object$objects$Taxon %in% uniq)
#vector[symbolsPositions == uniq] = symbols[levelPos]
vector = as.character(vector)
vector[vector == uniq] = symbols[levelPos]
vector = as.factor(vector)
}
return(as.character(vector))
}
# nastav pch, col a pt.bg spravne podla taxonu
cdaResult$col = setValuesForVector(cdaResult$objects$Taxon, "black") # farba prazdneho znaku, samotna farba bude v pt.bg
cdaResult$pt.bg = setValuesForVector(cdaResult$objects$Taxon, col)
col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6))
cdaResult$pt.bg = setValuesForVector(cdaResult$objects$Taxon, col)
cdaResult$pt.bg
unique(cdaResult$col)
unique(cdaResult$pt.bg)
plot.points(cdaResult, col = c("black", "white", "white"),  legend = T, breaks = seq(-6,3.5,0.5))
# nastav pch, col a pt.bg spravne podla taxonu
cdaResult$col = setValuesForVector(cdaResult$objects$Taxon, "black") # farba prazdneho znaku, samotna farba bude v pt.bg
cdaResult$pt.bg = setValuesForVector(cdaResult$objects$Taxon, col)
cdaResult$pt.bg
cdaResult$col
col
merge(cdaResult$objects$Taxon, cdaResult$pt.bg)
cbind(cdaResult$objects$Taxon, cdaResult$pt.bg)
cbind(as.character(cdaResult$objects$Taxon), cdaResult$pt.bg)
legendTable = cbind(as.character(cdaResult$objects$Taxon), cdaResult$pt.bg)
unique(legendTable)
unique(cdaResult$col)
source('C:/Users/mslen/source/Git/MorphoTools/R/plot.points.R')
library(MorphoTools)
plot.points(cdaResult, col = c("black", "white", "white"),  legend = T, breaks = seq(-6,3.5,0.5))
cdaResult
cdaResult = cda.calc(dataShort, passiveSamples = "hybr")
plot.points(cdaResult, col = c("black", "white", "white"),  legend = T, breaks = seq(-6,3.5,0.5))
library(MorphoTools)
plot.points(cdaResult, col = c("black", "white", "white"),  legend = T, breaks = seq(-6,3.5,0.5))
library(MorphoTools)
plot.points(cdaResult, col = c("black", "white", "white"),  legend = T, breaks = seq(-6,3.5,0.5))
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
cdaResult = cda.calc(dataShort, passiveSamples = "hybr")
dataShort = delete.taxon(object = data, taxonName =  c("ph"))
cdaResult = cda.calc(dataShort, passiveSamples = "hybr")
summary(data)
plot.points(cdaRes, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), legend = T, breaks = seq(-6, 4, 0.2))
plot.points(cdaResult, col = c("green", "orange"), legend = T, breaks = seq(-6, 4, 0.2), pch = c(22, 15, 25, 21))
plot.points(cdaResult, pt.bg = c("green", "red", "navy", "orange"), col = c("black", "red", "black", "red"),  legend = T, pch = c(22, 15, 25, 21))
library(MorphoTools)
plot.points(cdaResult, col = c("green", "orange"), legend = T, breaks = seq(-6, 4, 0.2), pch = c(22, 15, 25, 21))
plot.points(cdaResult, pt.bg = c("green", "red", "navy", "orange"), col = c("black", "red", "black", "red"),  legend = T, pch = c(22, 15, 25, 21))
plot.points(cdaResult, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)),  legend = T, breaks = seq(-6,3.5,0.5))
plot.points(cdaResult, col = c("black", "white", "white"),  legend = T, breaks = seq(-6,3.5,0.5))
cdaResult = cda.calc(data)
legendTable = cbind(as.character(cdaResult$objects$Taxon), cdaResult$col, cdaResult$pt.bg)
legendTable = unique(legendTable)
legendTable
setValuesForVector <- function(vector, symbols) {
uniques = unique(vector)
for (uniq in uniques) {
levelPos = which( uniques %in% uniq )
while (levelPos > length(symbols)) {
# ak uzivatel zada 2 pch pre 3 taxony, tak pre posledny taxon 3 - 2 a pch bude 1
levelPos = levelPos - length(symbols)
}
#symbolsPositions = which( object$objects$Taxon %in% uniq)
#vector[symbolsPositions == uniq] = symbols[levelPos]
vector = as.character(vector)
vector[vector == uniq] = symbols[levelPos]
vector = as.factor(vector)
}
return(as.character(vector))
}
col = c("black", "red", "black", "red")
pt.bg = c("green", "red", "navy", "orange")
pch = c(22, 15, 25, 21)
# nastav pch a col spravne podla taxonu
cdaResult$pch = as.numeric( setValuesForVector(cdaResult$objects$Taxon, pch))
cdaResult$col = setValuesForVector(cdaResult$objects$Taxon, col)
cdaResult$pt.bg = setValuesForVector(cdaResult$objects$Taxon, pt.bg)
legendTable = cbind(as.character(cdaResult$objects$Taxon), cdaResult$col, cdaResult$pt.bg)
legendTable = unique(legendTable)
legendTable
legendTable = cbind(as.character(cdaResult$objects$Taxon), cdaResult$pch, cdaResult$col, cdaResult$pt.bg)
legendTable = unique(legendTable)
legendTable
legendTable = cbind(as.character(cdaResult$objects$Taxon), as.numeric(cdaResult$pch), cdaResult$col, cdaResult$pt.bg)
legendTable = unique(legendTable)
legendTable
as.numeric(cdaResult$pch)
legendTable = cbind(as.character(cdaResult$objects$Taxon), cdaResult$pch, cdaResult$col, cdaResult$pt.bg)
legendTable = unique(legendTable)
legendTable
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library("MorphoTools", lib.loc="~/R/win-library/3.6")
library(MorphoTools)
pcaRes = pca.calc(dataShort)
plot.points(pcaRes, col = c("black", "white", "white"),  legend = T, breaks = seq(-6,3.5,0.5))
pca.eigenVectors(pcaRes, n = 100)
warnings()
plot.points(pcaRes, col = c("black", "white", "white"),  legend = T)
pca.eigenVectors(pcaRes, n = 100)
pratensis = read.morphodata("clipboard")
cda.prat = cda.calc(pratensis)
plot.points(cda.prat, col = c("red", "green", "navy"), legend = T)
plot.points(cda.prat, col = c("red", "green", "navy"), legend = T)
plot.points(cda.prat, col = c("red", "green", "navy"), legend = T, cex = 1.5)
plot.points(cda.prat, col = c("red", "green", "navy"), legend = T, cex = 1.2)
plot.points(cda.prat, col = c("red", "green", "navy"), legend = T)
plot.points(cda.prat, col = c("red", "green", "navy"), legend = T)
cda.prat$axesVariance
cda.prat$cumulativeAxesVariance
summary(cda.prat)
library(MorphoTools)
cda.totalCanonicalStructure(cda.prat)
cc = cda.totalCanonicalStructure(cda.prat)
export.res(cc)
cc = cda.eigenValues(cda.prat)
export.res(cc)
str(cc)
cda.eigenValues(cda.prat)
cc = cda.eigenValues(cda.prat)
library(MorphoTools)
cc = cda.eigenValues(cda.prat)
str(cc)
export.res(cc)
row.names(cc)
colnames(cc)
as.data.frame(cc)
library(MorphoTools)
export.res(cc)
library(MorphoTools)
library(MorphoTools)
export.res(cc)
names(cc)
deparse(cc)
quote(cc)
library(MorphoTools)
export.res(cc)
cda.totalCanonicalStructure(cda.prat)
export.res(cda.totalCanonicalStructure(cda.prat))
cda.eigenValues(cda.prat)
cda.prat$totalCanonicalStructure
cda.prat$coeffs.raw
cda.prat$coeffs.std
library(MorphoTools)
individuals = read.morphodata ("clipboard")
library(MorphoTools)
individuals = read.morphodata ("clipboard")
summary(individuals)
View(individuals)
individuals$Taxon
cc = cda.calc(individuals, passiveSamples = "C. x ferrarii")
plot(cc)
plot.points(cc)
plot.points(cc, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
plot.points(cc, col = c( rgb(1,1,1, alpha=0.6), rgb(0,0,0, alpha=0.6)))
plot.points(cc, col = c( rgb(1,1,1, alpha=0.6), rgb(0,0,0, alpha=0.6)), breaks = seq(-8, 8, 0.5))
plot.points(cc, col = c( rgb(1,1,1, alpha=0.6), rgb(0,0,0, alpha=0.6)), breaks = seq(-7.5, 8, 0.5))
ind2 = delete.taxon(individuals, taxonName = "C. x ferrarii")
cc2 = cda.calc(ind2)
plot.points(cc, col = "white")
plot.points(cc2, col = "white")
plot.points(cc2, col = "white", breaks = seq(-7.5, 8, 0.5))
plot.points(cc, col = c( rgb(1,1,1, alpha=0.6), rgb(0,0,0, alpha=0.6)), breaks = seq(-7.5, 8, 0.5))
plot.points(cc2, col = "white", breaks = seq(-7.5, 8, 0.5))
cc3 = cda.calc(individuals)
plot.points(cc3, col = c("red", "green", "navy"), breaks = seq(-7.5, 8, 0.5))
plot.points(cc3, col = c("red", "green", "navy"), breaks = seq(-7.5, 8, 0.5), legend = T)
plot.points(cc3, col = c("red", "green", "navy"), breaks = seq(-7.5, 8, 0.5), legend = T, legend.pos = c(-1, 2))
