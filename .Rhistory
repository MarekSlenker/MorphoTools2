return(
stats::dist(object$data, method = "manhattan", diag = FALSE, upper = FALSE)
)
},
"minkowski" = {
return(
stats::dist(object$data, method = "minkowski", diag = FALSE, upper = FALSE)
)
},
stop(paste("distMethod \"", distMethod , "\" is not supported.", sep = ""), call. = FALSE)
)
}
library(MorphoTools2)
data(centaurea)
centaurea = naMeanSubst(centaurea)
centaurea = deletePopulation(centaurea, populationName = c("LIP", "PREL"))
object=centaurea
object=read.morphodata("clipboard")
object=centaurea
pcoaResult = .newPcoadata()
xRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
eig = TRUE) # only to find numb of possitive eigenvalues
rank = length(xRes$eig[which(xRes$eig > 0)])
if (rank >= length(object$ID) ) {
rank = length(object$ID)-1
}
princompRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
k = rank, eig = TRUE, x.ret = TRUE)
newNames = NULL
for (i in 1:rank) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
princompRes$points
colnames(princompRes$points)
colnames(princompRes$points)[1..4]
colnames(princompRes$points)[1-4]
# princompRes$points = as.data.frame(princompRes$points) # update2
colnames(princompRes$points) = newNames
colnames(princompRes$points)
colnames(princompRes$points)[1..4]
colnames(princompRes$points)[1-4]
setNames(princompRes$points = newNames)
setNames(princompRes$points, newNames)
princompRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
k = rank, eig = TRUE, x.ret = TRUE)
newNames = NULL
for (i in 1:rank) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
# princompRes$points = as.data.frame(princompRes$points) # update2
princompRes$points = setNames(princompRes$points, newNames)
pcoaResult$rank = rank
pcoaResult$distMethod = distMethod
pcoaResult$objects$scores = princompRes$points
pcoaResult$objects$ID = object$ID
pcoaResult$objects$Population = object$Population
pcoaResult$objects$Taxon = object$Taxon
pcoaResult$eigenvalues = princompRes$eig #[1:rank]
pcoaResult$eigenvaluesAsPercentages = round(princompRes$eig[1:rank]/sum(princompRes$eig[1:rank]), 5)
pcoaResult$cumulativePercentageOfEigenvalues = round(cumsum(princompRes$eig[1:rank]/sum(princompRes$eig[1:rank])), 5)
names(pcoaResult$eigenvaluesAsPercentages) = newNames
names(pcoaResult$cumulativePercentageOfEigenvalues) = newNames
pcoaResult$eigenvaluesAsPercentages
setNames
D = .calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs)
d = .calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs)
k = 2
k = rank
eig = TRUE
x.ret = TRUE
list. = eig || add || x.ret
is.null(n <- attr(d, "Size"))
rn
rn <- attr(d, "Labels")
rn
x <- matrix(0, n, n)
if (add)
d0 <- x
x[row(x) > col(x)] <- d^2
x <- x + t(x)
n <- as.integer(n)
if (is.na(n) || n > 46340)
stop(gettextf("invalid value of %s", "'n'"), domain = NA)
if ((k <- as.integer(k)) > n - 1 || k < 1)
stop("'k' must be in {1, 2, ..  n - 1}")
x <- .Call(C_DoubleCentre, x)
dimnames(princompRes$points)
# find and report constant columns
constantColumns = colnames(object$data)[apply(object$data, 2, function(x) (abs(max(x)-min(x)))==0 )]
pcaResult = .newPcadata()
.newPcadata <- function() {
.newPcadata <- list(
objects = list(
ID = numeric(),
Population = numeric(),
Taxon = numeric(),
scores = numeric()),
eigenvectors = numeric(),
eigenvalues = numeric(),
eigenvaluesAsPercentages = numeric(),
cumulativePercentageOfEigenvalues = numeric(),
groupMeans = data.frame(),
rank = numeric(),
center = numeric(),
scale = numeric()
)
attr(.newPcadata, "class") <- "pcadata"
return(.newPcadata)
}
pcaResult = .newPcadata()
princompRes = stats::princomp(object$data, cor = TRUE)
cmdscaleRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
k = rank, eig = TRUE, x.ret = TRUE)
dimnames(cmdscaleRes$points)
dimnames(princompRes$scores)
dim(princompRes$scores)
dim(cmdscaleRes$points)
dim(cmdscaleRes$points)[2]
1:dim(cmdscaleRes$points)[2]
for (i in 1:dim(cmdscaleRes$points)[2]) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
colnames(cmdscaleRes$points)
colnames(cmdscaleRes$points) = newNames
dimnames(cmdscaleRes$points)[2]
dimnames(cmdscaleRes$points)[[2]]
colnames(cmdscaleRes$points)
newNames
dimnames(cmdscaleRes$points)[[2]] = newNames
dimnames(cmdscaleRes$points)[[2]]
newNames
dimnames(cmdscaleRes$points)[[2]]
dimnames(cmdscaleRes$points)
names(cmdscaleRes$points)
colnames(cmdscaleRes$points)
# cmdscaleRes$points = as.data.frame(cmdscaleRes$points) # update2
colnames(cmdscaleRes$points) = newNames
newNames
cmdscaleRes$points
cmdscaleRes$points = as.data.frame(cmdscaleRes$points) # update2
colnames(cmdscaleRes$points) = newNames
colnames(cmdscaleRes$points)
newNames
colnames(cmdscaleRes$points) = newNames
length(newNames)
# cmdscaleRes$points names
newNames = NULL
for (i in 1:dim(cmdscaleRes$points)[2]) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
cmdscaleRes$points = as.data.frame(cmdscaleRes$points) # update2
colnames(cmdscaleRes$points) = newNames
cmdscaleRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
k = rank, eig = TRUE, x.ret = TRUE)
# cmdscaleRes$points names
newNames = NULL
for (i in 1:dim(cmdscaleRes$points)[2]) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
#cmdscaleRes$points = as.data.frame(cmdscaleRes$points) # update2
colnames(cmdscaleRes$points) = newNames
cmdscaleRes$points
pcoaResult$rank = rank
pcoaResult$distMethod = distMethod
pcoaResult$objects$scores = cmdscaleRes$points
pcoaResult$objects$ID = object$ID
pcoaResult$objects$Population = object$Population
pcoaResult$objects$Taxon = object$Taxon
pcoaResult$eigenvalues = cmdscaleRes$eig #[1:rank]
pcoaResult$eigenvaluesAsPercentages = round(cmdscaleRes$eig[1:rank]/sum(cmdscaleRes$eig[1:rank]), 5)
pcoaResult$cumulativePercentageOfEigenvalues = round(cumsum(cmdscaleRes$eig[1:rank]/sum(cmdscaleRes$eig[1:rank])), 5)
names(pcoaResult$eigenvaluesAsPercentages)
pcoaResult$eigenvaluesAsPercentages
newNames = NULL
dim(pcoaResult$eigenvaluesAsPercentages)
pcoaResult$rank = rank
pcoaResult$distMethod = distMethod
pcoaResult$objects$scores = cmdscaleRes$points
pcoaResult$objects$ID = object$ID
pcoaResult$objects$Population = object$Population
pcoaResult$objects$Taxon = object$Taxon
pcoaResult$eigenvalues = cmdscaleRes$eig #[1:rank]
pcoaResult$eigenvaluesAsPercentages = round(cmdscaleRes$eig[1:rank]/sum(cmdscaleRes$eig[1:rank]), 5)
pcoaResult$cumulativePercentageOfEigenvalues = round(cumsum(cmdscaleRes$eig[1:rank]/sum(cmdscaleRes$eig[1:rank])), 5)
names(pcoaResult$eigenvaluesAsPercentages)
pcoaResult$eigenvaluesAsPercentages
dim(pcoaResult$eigenvaluesAsPercentages)
length(pcoaResult$eigenvaluesAsPercentages)
1:length(pcoaResult$eigenvaluesAsPercentages)
newNames = NULL
for (i in 1:length(pcoaResult$eigenvaluesAsPercentages)) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
names(pcoaResult$eigenvaluesAsPercentages) = newNames
pcoaResult$cumulativePercentageOfEigenvalues
names(pcoaResult$cumulativePercentageOfEigenvalues) = newNames
library(MorphoTools2)
devtools::build()
pcoaResult$groupMeans
pcoaResult$groupMeans
# group centroid locations
pcoaResult$groupMeans = stats::aggregate(cmdscaleRes$points ~ object$Taxon, FUN = mean)
pcoaResult$groupMeans
xRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
eig = TRUE) # only to find numb of possitive eigenvalues
rank = length(xRes$eig[which(xRes$eig > 0)])
if (rank >= length(object$ID) ) {
rank = length(object$ID)-1
}
cmdscaleRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
k = rank, eig = TRUE, x.ret = TRUE)
# NAMES: cmdscaleRes$points
newNames = NULL
for (i in 1:dim(cmdscaleRes$points)[2]) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
#cmdscaleRes$points = as.data.frame(cmdscaleRes$points) # update2
colnames(cmdscaleRes$points) = newNames
pcoaResult$rank = rank
pcoaResult$distMethod = distMethod
pcoaResult$objects$scores = cmdscaleRes$points
pcoaResult$objects$ID = object$ID
pcoaResult$objects$Population = object$Population
pcoaResult$objects$Taxon = object$Taxon
pcoaResult$eigenvalues = cmdscaleRes$eig #[1:rank]
pcoaResult$eigenvaluesAsPercentages = round(cmdscaleRes$eig[1:rank]/sum(cmdscaleRes$eig[1:rank]), 5)
pcoaResult$cumulativePercentageOfEigenvalues = round(cumsum(cmdscaleRes$eig[1:rank]/sum(cmdscaleRes$eig[1:rank])), 5)
newNames = NULL
for (i in 1:length(pcoaResult$eigenvaluesAsPercentages)) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
names(pcoaResult$eigenvaluesAsPercentages) = newNames
names(pcoaResult$cumulativePercentageOfEigenvalues) = newNames
pcoaResult$groupMeans
pcoaResult = .newPcoadata()
xRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
eig = TRUE) # only to find numb of possitive eigenvalues
rank = length(xRes$eig[which(xRes$eig > 0)])
if (rank >= length(object$ID) ) {
rank = length(object$ID)-1
}
cmdscaleRes = stats::cmdscale(.calcDistance(object, distMethod = distMethod, center = TRUE, scale = TRUE, binaryChs = binaryChs, nominalChs = nominalChs, ordinalChs = ordinalChs),
k = rank, eig = TRUE, x.ret = TRUE)
# NAMES: cmdscaleRes$points
newNames = NULL
for (i in 1:dim(cmdscaleRes$points)[2]) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
#cmdscaleRes$points = as.data.frame(cmdscaleRes$points) # update2
colnames(cmdscaleRes$points) = newNames
pcoaResult$rank = rank
pcoaResult$distMethod = distMethod
pcoaResult$objects$scores = cmdscaleRes$points
pcoaResult$objects$ID = object$ID
pcoaResult$objects$Population = object$Population
pcoaResult$objects$Taxon = object$Taxon
pcoaResult$eigenvalues = cmdscaleRes$eig #[1:rank]
pcoaResult$eigenvaluesAsPercentages = round(cmdscaleRes$eig[1:rank]/sum(cmdscaleRes$eig[1:rank]), 5)
pcoaResult$cumulativePercentageOfEigenvalues = round(cumsum(cmdscaleRes$eig[1:rank]/sum(cmdscaleRes$eig[1:rank])), 5)
newNames = NULL
for (i in 1:length(pcoaResult$eigenvaluesAsPercentages)) {
newNames = c(newNames, paste("PCo", i, sep = ""))
}
names(pcoaResult$eigenvaluesAsPercentages) = newNames
names(pcoaResult$cumulativePercentageOfEigenvalues) = newNames
pcoaResult$groupMeans
stats::aggregate(cmdscaleRes$points ~ object$Taxon, FUN = mean)
# group centroid locations
pcoaResult$groupMeans = stats::aggregate(cmdscaleRes$points ~ object$Taxon, FUN = mean)
pcoaResult$groupMeans
colnames(pcoaResult$groupMeans)
colnames(pcoaResult$groupMeans)[1]
# group centroid locations
pcoaResult$groupMeans = stats::aggregate(cmdscaleRes$points ~ object$Taxon, FUN = mean)
colnames(pcoaResult$groupMeans)[1]
colnames(pcoaResult$groupMeans)[1] = "Taxon"
return(pcoaResult)
devtools::build()
unlink("vignettes/MorphoTools2_tutorial_cache", recursive = TRUE)
library(rmarkdown)
rmarkdown::render("./vignettes/MorphoTools2_tutorial.Rmd", output_format = latex_document())
object = read.morphodata("clipboard")
passiveSamples = c("u404", "u419")
library(MorphoTools2)
object = read.morphodata("clipboard")
objectWithPassiveSamples = object  # povodny objekt
objectNoPassiveSamples = object
for (groupName in passiveSamples) {
if (groupName %in% objectNoPassiveSamples$Taxon) objectNoPassiveSamples = .removeByColumn(objectNoPassiveSamples, "Taxon", groupName)
if (groupName %in% objectNoPassiveSamples$Population) objectNoPassiveSamples = .removeByColumn(objectNoPassiveSamples, "Population", groupName)
}
# internal
.removeByColumn <- function(object, column, groupName) {
# obj je triedy morfodata, skontrolovane vyssie
# groupName moze byt i viac
toRemove = array(data = NA, dim = 0)
for (name in groupName) {
toRemove = c(toRemove, which( unlist(object[column]) %in% name) )
}
newObject = .newMorphodata()
newObject$ID = droplevels( object$ID[-toRemove] )
newObject$Population = droplevels( object$Population[-toRemove] )
newObject$Taxon = droplevels( object$Taxon[-toRemove] )
newObject$data = object$data[-toRemove, ]
return(newObject)
}
for (groupName in passiveSamples) {
if (groupName %in% objectNoPassiveSamples$Taxon) objectNoPassiveSamples = .removeByColumn(objectNoPassiveSamples, "Taxon", groupName)
if (groupName %in% objectNoPassiveSamples$Population) objectNoPassiveSamples = .removeByColumn(objectNoPassiveSamples, "Population", groupName)
}
# internal
# returns new morphodata object
.newMorphodata <- function() {
.newMorphodata <- list(
ID = NULL,
Population = NULL,
Taxon = NULL,
data = data.frame()
)
attr(.newMorphodata, "class") <- "morphodata"
return(.newMorphodata)
}
for (groupName in passiveSamples) {
if (groupName %in% objectNoPassiveSamples$Taxon) objectNoPassiveSamples = .removeByColumn(objectNoPassiveSamples, "Taxon", groupName)
if (groupName %in% objectNoPassiveSamples$Population) objectNoPassiveSamples = .removeByColumn(objectNoPassiveSamples, "Population", groupName)
}
candisc_MK <- function (mod, term, type = "2", manova, ndim = rank, ...)
{
if (!inherits(mod, "mlm"))
stop("Not an mlm object")
if (missing(manova))
manova <- car::Anova(mod, type = as.character(type))
terms <- manova$terms
if (missing(term))
term <- terms[1]
E <- manova$SSPE
H <- manova$SSP[[term]]
dfe <- manova$error.df
dfh <- manova$df[[term]]
Sp <- E/dfe
#tdecomp <- function(m) {
#    wm <- eigen(m, symmetric = TRUE)  # povodne symmetric T
#    p <- ncol(m)
#    wmd <- wm$values
#    # tam kde sa wmd blizi 0, odmocnina z toho spravi NaN, tak z toho teraz spravim nieco veelmi male (z NaN)
#    diasq=suppressWarnings(diag(sqrt(wmd)))
#    malaBlbost = replace(diasq, is.na(diasq), -1.4E-4)  # MK
#    out <- t(wm$vectors %*% malaBlbost)  # MK
#    #out <- t(wm$vectors %*% diag(sqrt(wmd))) # candisc
#    out
#}
#Tm <- tdecomp(E)
Tm <- fpc::tdecomp(E)
eInv <- solve(Tm)
eHe <- t(eInv) %*% H %*% eInv
dc <- eigen(eHe, symmetric = TRUE)  # povodne symmetric T
rank <- min(dfh, sum(dc$values > 0))
pct <- 100 * dc$values/sum(dc$values)
if (ndim > rank) {
warning(paste("You asked for", ndim, "dimensions, but rank is", rank, ". ndim has been reset to", rank))
ndim <- rank
}
coeffs.raw <- eInv %*% dc$vectors * sqrt(dfe)
coeffs.raw <- as.matrix(coeffs.raw[, 1:ndim])
rownames(coeffs.raw) <- rownames(H)
colnames(coeffs.raw) <- cn <- paste("Can", 1:ndim, sep = "")
coeffs.std <- diag(sqrt(diag(Sp))) %*% coeffs.raw
rownames(coeffs.std) <- rownames(H)
colnames(coeffs.std) <- cn
data <- stats::model.frame(mod)
Y <- stats::model.response(data)
Y <- scale(Y, center = TRUE, scale = FALSE)
scores <- Y %*% coeffs.raw
scores <- as.matrix(scores[, 1:ndim])
colnames(scores) <- cn
all.factors <- data[, sapply(data, is.factor), drop = FALSE]
factor.names <- unlist(strsplit(term, ":"))
factors <- data[factor.names]
means <- stats::aggregate(scores, factors, mean)
rownames(means) <- do.call(paste, c(means[factor.names],
sep = ":"))
means <- means[, -(1:length(factor.names))]
structure <- stats::cor(Y, scores)
canrsq <- dc$values[1:ndim]/(1 + dc$values[1:ndim])
#scores <- cbind(model.frame(mod)[predictor.names(mod)], as.data.frame(scores))
scores <- as.data.frame(scores)
result <- list(dfh = dfh, dfe = dfe, eigenvalues = dc$values,
canrsq = canrsq, pct = pct, rank = rank, ndim = ndim,
means = means, factors = factors, term = term, terms = terms,
coeffs.raw = coeffs.raw, coeffs.std = coeffs.std, structure = structure,
scores = scores)
class(result) <- "candisc"
result
}
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = stats::lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
# cda = candisc::candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
cda = candisc_MK(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
mod = x_NoPassiveSamples
term="objectNoPassiveSamples$Taxon"
if (!inherits(mod, "mlm"))
stop("Not an mlm object")
if (missing(manova))
manova <- car::Anova(mod, type = as.character(type))
type = "2"
if (missing(manova))
manova <- car::Anova(mod, type = as.character(type))
terms <- manova$terms
manova <- car::Anova(mod, type = as.character(type))
terms <- manova$terms
if (missing(term))
term <- terms[1]
E <- manova$SSPE
H <- manova$SSP[[term]]
dfe <- manova$error.df
dfh <- manova$df[[term]]
Sp <- E/dfe
Tm <- fpc::tdecomp(E)
tdecomp <- function(m) {
wm <- eigen(m, symmetric = TRUE)  # povodne symmetric T
p <- ncol(m)
wmd <- wm$values
# tam kde sa wmd blizi 0, odmocnina z toho spravi NaN, tak z toho teraz spravim nieco veelmi male (z NaN)
diasq=suppressWarnings(diag(sqrt(wmd)))
malaBlbost = replace(diasq, is.na(diasq), -1.4E-4)  # MK
out <- t(wm$vectors %*% malaBlbost)  # MK
#out <- t(wm$vectors %*% diag(sqrt(wmd))) # candisc
out
}
Tm <- tdecomp(E)
eInv <- solve(Tm)
eHe <- t(eInv) %*% H %*% eInv
dc <- eigen(eHe, symmetric = TRUE)  # povodne symmetric T
rank <- min(dfh, sum(dc$values > 0))
pct <- 100 * dc$values/sum(dc$values)
if (ndim > rank) {
warning(paste("You asked for", ndim, "dimensions, but rank is", rank, ". ndim has been reset to", rank))
ndim <- rank
}
coeffs.raw <- eInv %*% dc$vectors * sqrt(dfe)
coeffs.raw <- as.matrix(coeffs.raw[, 1:ndim])
rownames(coeffs.raw) <- rownames(H)
colnames(coeffs.raw) <- cn <- paste("Can", 1:ndim, sep = "")
coeffs.std <- diag(sqrt(diag(Sp))) %*% coeffs.raw
rownames(coeffs.std) <- rownames(H)
colnames(coeffs.std) <- cn
m = E
wm <- eigen(m, symmetric = TRUE)  # povodne symmetric T
p <- ncol(m)
wmd <- wm$values
# tam kde sa wmd blizi 0, odmocnina z toho spravi NaN, tak z toho teraz spravim nieco veelmi male (z NaN)
diasq=suppressWarnings(diag(sqrt(wmd)))
diag(sqrt(wmd))
sqrt(wmd)
wmd
values
wm
wm$values
wm$values > 0
wmd <- wm$values[wm$values > 0]
# tam kde sa wmd blizi 0, odmocnina z toho spravi NaN, tak z toho teraz spravim nieco veelmi male (z NaN)
diasq=suppressWarnings(diag(sqrt(wmd)))
t(wm$vectors %*% diag(sqrt(wm$values[wm$values > 0])))
library(MorphoTools2)
install.packages("MorphoTools2")
install.packages("devtoolbox")
install.packages("testthat")
install.packages("roxygen2")
library(MorphoTools2)
install.packages("devtools")
devtools::build()
install.packages("processx")
install.packages("processx")
devtools::build()
install.packages("klaR")
data(iris)
library(MASS)
iris.d <- iris[,1:4] # the data
iris.c <- iris[,5] # the classes
sc_obj <- stepclass(iris.d, iris.c, "lda", start.vars = "Sepal.Width")
library(klaR)
iris.d <- iris[,1:4] # the data
iris.c <- iris[,5] # the classes
sc_obj <- stepclass(iris.d, iris.c, "lda", start.vars = "Sepal.Width")
sc_obj <- stepclass(iris.d, iris.c, "lda")
devtools::build()
library(MorphoTools2)
devtools::build()
install.packages("learnr")
?compactPDF
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
gs_cmd = Sys.getenv("R_GSCMD", "")
gs_quality = Sys.getenv("GS_QUALITY", "none")
gs_quality
gs_cmd
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("R_GSCMD", "")
Sys.getenv("R_GSCMD")
Sys.setenv(R_GSCMD="C:\Program Files\gs\gs9.55.0\bin")
Sys.setenv(R_GSCMD="C:/Program Files/gs/gs9.55.0/bin")
devtools::build(args = "--compact-vignette")
devtools::build(args = "--compact-vignettes")
devtools::build(args = "--compact-vignettes="gs"")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.getenv("R_GSCMD", "")
Sys.getenv("GS_QUALITY", "none")
Sys.setenv(GS_QUALITY="ebook")
devtools::build(args = "--compact-vignettes")
citation()
version()
citation()
