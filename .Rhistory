devtools::load_all()
document()
library(roxygen2)
document()
roxygenise()
roxygenise()
roxygenise()
library(MorphoTools)
use_r("dog_functions")
usethis::use_r("make")
library(ape)
library(ape)
isS3method(read.tree)
isS3method("read.tree")
isS4method("read.tree")
isS4("read.tree")
<<<<<<< HEAD
install.packages("vegan")
setwd("/home/mint/Dropbox/MorphoTools/Kouta_morphotools")
read.delim("sample.txt")
tab = read.delim("sample.txt")
View(tab)
xdata = read.delim("sample.txt")
names(xdata)[1:3]<-c("ID","Population","Taxon")
is.factor(xdata$ID)
is.factor(xdata$LW)
iter <- 12
try(if(iter > 10) stop("too many iterations"))
tst1 <- function(...) stop("dummy error")
try(tst1(1:10, long, calling, expression))
tst2 <- function(...) stop("dummy error", call. = FALSE)
try(tst2(1:10, longcalling, expression, but.not.seen.in.Error))
tst2(1:10, longcalling, expression, but.not.seen.in.Error)
tst2(1)
if (iter >10) stop("dummy error", call. = FALSE)
dim(xdata)
dim(xdata)[1]
dim(xdata)[2]
xdata = read.delim("clipboard")
names(xdata)[1:3]<-c("ID","Population","Taxon")
xdata = read.delim("clipboard")
xdata = read.delim("clipboard")
xdata = read.delim("clipboard", dec = ".")
xdata = read.delim("clipboard", dec = ".")
xdata = read.delim("clipboard", dec = ".", sep = "\t")
xdata = read.delim("clipboard", dec = ".", sep = " ")
View(xdata)
xdata = read.delim("clipboard", dec = ".", sep = " ")
View(xdata)
xdata = read.delim("clipboard", dec = ".", sep = " ")
xdata = read.delim("clipboard", dec = ".", sep = "\t")
xdata = read.delim("clipboard")
View(xdata)
xdata = read.delim("clipboard")
rm(xdata)
xdata = read.delim("clipboard")
xdata = read.delim("clipboard")
xdata = read.delim("clipboard")
xdata = read.delim("clipboard", sep = " ")
View(xdata)
xdata = read.delim("sample_Xshort")
setwd("/home/mint/Dropbox/MorphoTools/Kouta_morphotools")
xdata = read.delim("sample_Xshort")
xdata = read.delim("sample_Xshort.txt")
names(xdata)[1:3]<-c("ID","Population","Taxon")
dim(xdata)[2]
a = dim(xdata)[2]
a = dim(xdata)[2][]
if (dim(xdata)[2] <= 3) stop("incorrect-data-format")
xdata = read.delim("sample_short.txt")
if (dim(xdata)[2] <= 3) stop("incorrect-data-format")
if (dim(xdata)[2] <= 3) stop("Incorrect data format.")
xdata = read.delim("sample_Xshort.txt")
if (dim(xdata)[2] <= 3) stop("Incorrect data format.")
cat("Data strucutre using str(x):","\n")
str(xdata)
devtools::load_all(".")
library(MorphoTools)
library(MorphoTools)
library(ape)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
roxygenise()
library(devtools)
library(roxygen2)
roxygenise()
library(MorphoTools)
roxygenise()
roxygenise()
library(MorphoTools)
roxygenise()
roxygenise()
library(MorphoTools)
devtools::document()
library(MorphoTools)
dd = read.morphodata("/home/mint/Dropbox/MorphoTools/Kouta_morphotools/sample_short.txt")
dd
ste(dd)
str(dd)
library(MorphoTools)
rm(dd)
dd = read.morphodata("/home/mint/Dropbox/MorphoTools/Kouta_morphotools/sample_short.txt")
str(dd)
class(dd)
summary(dd)
dd$data$MLW
dd$data
any(is.na(dd))
any(is.na.data.frame(dd))
any(is.na.data.frame(dd))
is.na(dd$data)
any(is.na(dd$data))
devtools::use_testthat()
devtools
BiocManager::install("testthat", lib = "/home/mint/R/x86_64-pc-linux-gnu-library/3.6")
devtools::use_testthat()
Devtools::use_testthat()
devtools::use_testthat()
devtools::use_testthat()
library(testthat)
devtools::use_testthat()
is.nan(dd)
is.nan(dd$data)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample_NaNs.txt")
str(dd)
View(dd$data)
any(is.na.data.frame(dd))
any(is.nan.data.frame(dd))
sum(is.nan(as.matrix(dd$data)))
as.matrix(dd$data)
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample_NaNs.txt")
sum(is.nan(as.matrix(dd$data)))
View(dd$data)
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample_NaNs.txt")
View(dd$data)
as.matrix(dd$data)
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample_NaNs.txt")
as.matrix(dd$data)
is.numeric(dd$data)
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample.txt")
sum(is.nan(as.matrix(dd$data)))
is.numeric(dd$data)
is.numeric(dd$data$SN)
is.numeric(dd$data$AL)
as.matrix(dd$data)
is.numeric(as.matrix(dd$data))
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample_NaNs.txt")
is.numeric(as.matrix(dd$data))
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample_numericNames.txt")
sum(is.nan(as.matrix(dd$data)))
is.numeric(as.matrix(dd$data))
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample_numericNames.txt")
is.numeric(as.matrix(dd$data))
dd = read.morphodata("/home/mint/Git/MorphoTools/tests/testFiles/sample_numericNames.txt")
sum(is.nan(as.matrix(dd$data)))
is.numeric(as.matrix(dd$data))
devtools::test()
devtools::test()
devtools::test()
=======
library(MorphoTools)
read.morphodata("../testFiles/sample_decComa.txt", dec=",")
getwd()
read.morphodata("./testFiles/sample_decComa.txt", dec=",")
read.morphodata("./tests/testFiles/sample_decComa.txt", dec=",")
library(MorphoTools)
data = read.morphodata("../testFiles/sample_decComa.txt", dec=",")
context("read.morphodata: unvalid input")
test_that("input file is too short", {
expect_error(read.morphodata("../testFiles/shortFile.txt"), "incorrect data format")
})
test_that("input file contains NaN", {
expect_error(read.morphodata("../testFiles/sample_NaNs.txt"), "input contains non-numeric data")
})
test_that("decimal point character is \",\" - correctly stated",  {
data = read.morphodata("../testFiles/sample_decComa.txt", dec=",")
expect_output(str(data), "List of 4")
data = read.morphodata("../testFiles/sample_decComa.txt", dec=",")
library(roxygen2)
devtools::load_all()
source('~/drive/MorphoTools_git/MorphoTools/R/.initial.R', echo=TRUE)
sample_decComa
}
library(MorphoTools)
devtools::test()
library(devtools)
BiocManager::install("devtools", lib = "/home/courseuser/R/x86_64-suse-linux-gnu-library/3.5/")
install.packages("devtools")
install.packages("farver")
library("BiocManager", lib.loc="~/R/x86_64-suse-linux-gnu-library/3.5")
?BiocManager::install
BiocManager::install("farver", lib = "/home/courseuser/R/x86_64-suse-linux-gnu-library/3.5/")
BiocManager::install("farver", lib = "/home/courseuser/R/x86_64-suse-linux-gnu-library/3.5/", type="source")
devtools::install_github('thomasp85/farver')
install.packages('farver')
g++ -std=gnu++11 -I"/usr/lib64/R/include" -DNDEBUG   -I/usr/local/include   -fpic  -fmessage-length=0 -grecord-gcc-switches -O2 -Wall -D_FORTIFY_SOURCE=2 -fstack-protector-strong -funwind-tables -fasynchronous-unwind-tables -g -c ColorSpace.cpp -o ColorSpace.o
BiocManager::install(version = "3.10")
>>>>>>> 23f2d9a3973e417940de93f458b26184ef5253dd
