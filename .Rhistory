x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
export.res(cda$scores, row.names = T)
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
scaleFactor
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
scoreList = (apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
export.res(data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T)), row.names = T)
data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
dd = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
dim(dd)
dim(objectWithPassiveSamples$Taxon)
dim(objectWithPassiveSamples$data)
rownames(dd) = objectWithPassiveSamples$Taxon
objectWithPassiveSamples$Taxon
rownames(dd)
objectWithPassiveSamples$Taxon
rownames(dd) = as.character(objectWithPassiveSamples$Taxon)
dd$taxa = as.character(objectWithPassiveSamples$Taxon)
export.res(dd$taxa)
export.res(as.data.frame(dd$taxa))
dd$id = as.character(objectWithPassiveSamples$ID)
export.res(as.data.frame(dd$id))
library(MorphoTools)
data("centaurea")
taxa(centaurea)
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
plot.points(cdaResNoPas, c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
cdaResNoPas
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
cdaResNoPas$objects$scores
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
cdaResNoPas$objects$scores
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
library(MorphoTools)
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
cdaResNoPas$objects$scores
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
# internal
# returns new pcadata object
newCdadata <- function() {
newCdadata <- list(
objects = list(
ID = factor(),
Population = factor(),
Taxon = factor(),
scores = data.frame()),
eigenValues = numeric(),
axesVariance = numeric(),
cumulativeAxesVariance = numeric(),
groupMeans = data.frame(),
rank = numeric(),
coeffs.std = matrix(),
coeffs.raw = matrix(),
totalCanonicalStructure = matrix(),
canrsq = numeric()
)
attr(newCdadata, "class") <- "cdadata"
return(newCdadata)
}
cdaResult = newCdadata()
cdaResult$objects$scores = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut data
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
scoreList = (apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
cdaResult$objects$scores = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
colnames(cdaResult$objects$scores)
colnames(cda$scores)[-1]
colnames(cdaResult$objects$scores) = colnames(cda$scores)[-1]
colnames(cdaResult$objects$scores)
rownames(cdaResult$objects$scores) = object$ID
library(MorphoTools)
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
objectWithPassiveSamples = delete.taxon(data, "ph")
objectNoPassiveSamples = delete.taxon(objectWithPassiveSamples, "hybr")
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
cdaResNoPas$objects$scores
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
sum(cdaResNoPas$objects$scores)
str(cdaResNoPas$objects$scores)
View(cdaResNoPas)
hist(cdaResNoPas$objects$scores)
hist(cdaResNoPas$objects$scores$Can1)
hist(as.numeric(cdaResNoPas$objects$scores))
hist(cdaResNoPas$objects$scores[])
hist(cdaResNoPas$objects$scores[1])
hist(cdaResNoPas$objects$scores[,])
hist(cdaResNoPas$objects$scores[,])
cdaResNoPas$objects$scores[,]
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
cdaResNoPas$objects$scores[,]
as.numeric(cdaResNoPas$objects$scores[,])
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = c(-6,4,0.5))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.2))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.1))
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.1))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5))
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5))
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
library(MorphoTools)
cdaResNoPas = cda.calc(objectNoPassiveSamples)
cdaResWithPas = cda.calc(objectWithPassiveSamples, passiveSamples = "hybr")
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
taxa()
taxa(objectWithPassiveSamples)
taxa(objectNoPassiveSamples)
# calculate with objectNoPassiveSamples
d_NoPassiveSamples = as.matrix(objectNoPassiveSamples$data)
x_NoPassiveSamples = lm(d_NoPassiveSamples ~ objectNoPassiveSamples$Taxon)
cda = candisc(x_NoPassiveSamples, term="objectNoPassiveSamples$Taxon")
# internal
# returns new pcadata object
newCdadata <- function() {
newCdadata <- list(
objects = list(
ID = factor(),
Population = factor(),
Taxon = factor(),
scores = data.frame()),
eigenValues = numeric(),
axesVariance = numeric(),
cumulativeAxesVariance = numeric(),
groupMeans = data.frame(),
rank = numeric(),
coeffs.std = matrix(),
coeffs.raw = matrix(),
totalCanonicalStructure = matrix(),
canrsq = numeric()
)
attr(newCdadata, "class") <- "cdadata"
return(newCdadata)
}
cdaResult = newCdadata()
# predict na zaklade plnej matice
# scaleFactor je konstanta, o ktoru treba posunut data
scaleFactor = (d_NoPassiveSamples %*% cda$coeffs.raw - cda$scores[,-1])[1,]
d_WithPassiveSamples = as.matrix(objectWithPassiveSamples$data)
scoreList = (apply(d_WithPassiveSamples %*% cda$coeffs.raw,1, FUN = function(x) {x - scaleFactor}))
cdaResult$objects$scores = data.frame(matrix(unlist(scoreList), nrow=length(scoreList), byrow=T))
colnames(cdaResult$objects$scores) = colnames(cda$scores)[-1]
rownames(cdaResult$objects$scores) = object$ID
dim(cdaResult$objects$scores)
dim(d_NoPassiveSamples)
dim(objectWithPassiveSamples$data)
dim(objectNoPassiveSamples$data)
dim(cdaResult$objects$scores)
dim(cda$scores)
cda$scores
dim(cdaResWithPas$objects$scores)
dim(objectWithPassiveSamples$data)
cdaResWithPas
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
library(MorphoTools)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.5), legend = T)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.2), legend = F)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-6,4,0.2), legend = F)
plot.points(cdaResNoPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-7,4,0.2), legend = F)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-7,4,0.2), legend = F)
plot.points(cdaResWithPas, col = c(rgb(0,0,0, alpha=0.6), rgb(1,1,1, alpha=0.6), rgb(1,1,1, alpha=0.6)), breaks = seq(-7,4,0.2), legend = T)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
data = read.morphodata("./tests/testFiles/samplePlnaMatica.txt")
summary(data)
samples(data)
populations(data)
taxa(data)
library(MorphoTools)
boxplot.character(data, "LL")
data(centaurea)
boxplot.character(centaurea, "ST", col = "orange", border = "red")
boxplot.character(centaurea, "ST", outliers = FALSE,
lowerWhisker = 0.1, upperWhisker = 0.9)
boxplot.character(centaurea, "ST", varwidth = T, notch = T,
boxwex = 0.4, staplewex = 1.3, horizontal = T)
boxplot.character(centaurea, "ST", boxlty = 1, medlwd = 5,
whisklty = 2, whiskcol = "red", staplecol = "red",
outcol = "grey30", pch = "-")
boxplot.character(centaurea, "ST", outliers = FALSE, cex.main = 0.7,
lowerWhisker = 0.1, upperWhisker = 0.9)
boxplot.character(centaurea, "ST", outliers = FALSE, cex.main = 0.7, frame=F,
lowerWhisker = 0.1, upperWhisker = 0.9)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
library(MorphoTools)
df = data.frame(a = 1, b = 3)
export.res(df)
data=read.morphodata("../testFiles/sample.txt")
data=read.morphodata("./testFiles/sample.txt")
data=read.morphodata("./tests//testFiles/sample.txt")
summary(data)
summary(data)
s = summary(data)
capture.output(summary(data))
library(testthat)
capture.output(summary(data))[1]
output = capture.output(summary(data))
output
output[1]
expect_equal(output[1], "object of class 'morphodata'")
expect_equal(output[2], "object of class 'morphodata'")
output[2]
expect_equal(output[2], " - contains 33 populations")
expect_equal(output[2], " - .contains 33 populations")
output[1]
output[5]
samples(data)
output = capture.output(samples(data))
output
output[1]
samples(data)
output[66]
output = capture.output(samples(data))
output[66]
output[1]
populations(data)
taxa(data)
capture.output(taxa(data))
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = 1:8,
"Ch2" = 11:18))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
morphoMockup$all = as.factor( rep("all", length(morphoMockup$Taxon)))
# Class "morphodata"
morphodataFromDataFrame <- function(indata) {
# check for required columns
if(!("ID" %in% colnames(indata)) | !("Population" %in% colnames(indata)) | !("Taxon" %in% colnames(indata)))
stop("input do not contains required columns", call. = F)
data = list(
"ID" = as.factor(indata$ID),
"Population" = as.factor(indata$Population),
"Taxon" = as.factor(indata$Taxon),
"data" = as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID))
)
#testuj ci tam nie je nejaky nezmysel .. slovo v cislach etc   .  cislo ako pop?
if (!(is.numeric(as.matrix(data$data)))) stop("input contains non-numeric data", call. = F)
attr(data, "class") <- "morphodata"
return(data)
}
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
morphoMockup$all = as.factor( rep("all", length(morphoMockup$Taxon)))
morphoMockup
descrByGroup <- function(object, column, digits) {
# obj je triedy morfodata, skontrolovane vyssie
characters = colnames(object$data)
descriptors = c("N","Mean","SD","Min","5%","25%","Median","75%","95%","Max")
groups =  levels(unlist(object[column]))
descrStatistic = array(numeric(), c(length(characters), length(descriptors), length(groups)), dimnames = list(characters, descriptors, groups))
# calculate descr statistics
for (group in groups) {
groupPositions = which( unlist(object[column]) %in% group)
# number of observations
descrStatistic[ , "N", group] = length(groupPositions)
# mean
descrStatistic[ , "Mean", group] = sapply(object$data[groupPositions, ], mean, na.rm=T)
# SD
descrStatistic[ , "SD", group] = sapply(object$data[groupPositions, ], sd, na.rm=T)
# Min
descrStatistic[ , "Min", group] = sapply(object$data[groupPositions, ], quantile, probs=0, na.rm=T)
# 5%
descrStatistic[ , "5%", group] = sapply(object$data[groupPositions, ], quantile, probs=0.05, na.rm=T)
# 25%
descrStatistic[ , "25%", group] = sapply(object$data[groupPositions, ], quantile, probs=0.25, na.rm=T)
# Median
descrStatistic[ , "Median", group] = sapply(object$data[groupPositions, ], quantile, probs=0.5, na.rm=T)
# 75%
descrStatistic[ , "75%", group] = sapply(object$data[groupPositions, ], quantile, probs=0.75, na.rm=T)
# 95%
descrStatistic[ , "95%", group] = sapply(object$data[groupPositions, ], quantile, probs=0.95, na.rm=T)
# Max
descrStatistic[ , "Max", group] = sapply(object$data[groupPositions, ], quantile, probs=1, na.rm=T)
}
descrStatistic = round(descrStatistic, digits = digits)
descrStatistic[which(is.nan(descrStatistic))] = NA
return(descrStatistic)
}
descrByGroup(morphoMockup, "Taxon")
"Ch1" = 1:2
morphoDataFrame = data.frame("ID" = c("id1","id2"),
"Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA", "TaxA"),
"data" = data.frame(
"Ch1" = 1:2
))
1:2
morphoDataFrame = data.frame("ID" = c("id1","id2"),
"Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA", "TaxA"),
"data" = data.frame(
"Ch1" = c(1,2)
))
"Ch2" = 1:2)
morphoDataFrame = data.frame("ID" = c("id1","id2"),
"Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA", "TaxA"),
"data" = data.frame(
"Ch1" = 1:2,
"Ch2" = 1:2))
morphoDataFrame = data.frame("ID" = c("id1","id2"),
"Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA", "TaxA"),
"data" = data.frame(
"Ch1" = 1:8,
"Ch2" = 11:18))
morphoDataFrame = data.frame("ID" = c("id1","id2"),
"Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA"),
"data" = data.frame(
"Ch1" = 1:2,
"Ch2" = 11:12))
morphoDataFrame = data.frame("ID" = c("id1","id2"),
"Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA"),
"data" = data.frame(
"Ch1" = 1:2))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
morphoDataFrame
morphoMockup$all = as.factor( rep("all", length(morphoMockup$Taxon)))
descrByGroup(morphoMockup, "Taxon")
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"data" = data.frame(
"Ch1" = 1:8,
"Ch2" = 11:18))
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
result = descrByGroup(morphoMockup, "Taxon", 3)
result
morphoDataFrame = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"), "Taxon" = c("TaxA", "TaxA"), "data" = data.frame("Ch1" = 1:2))
object = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"), "Taxon" = c("TaxA", "TaxA"), "data" = data.frame("Ch1" = 1:2))
column="Population"
digits=3
colnames(object$data)
object
object = morphodataFromDataFrame(data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"), "Taxon" = c("TaxA", "TaxA"), "data" = data.frame("Ch1" = 1:2)))
colnames(object$data)
df = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"), "Taxon" = c("TaxA", "TaxA"), "data" = data.frame("Ch1" = 1:2))
df
object = morphodataFromDataFrame(df)
object
indata = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"), "Taxon" = c("TaxA", "TaxA"), "data" = data.frame("Ch1" = 1:2))
# check for required columns
if(!("ID" %in% colnames(indata)) | !("Population" %in% colnames(indata)) | !("Taxon" %in% colnames(indata)))
indata[,-(1:3)]
data = list(
"ID" = as.factor(indata$ID),
"Population" = as.factor(indata$Population),
"Taxon" = as.factor(indata$Taxon),
"data" = as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID))
)
indata[,-(1:3)]
indata = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"), "Taxon" = c("TaxA", "TaxA"), "data" = data.frame("Ch1" = 1:2),"Ch2" = 1:2))
indata
indata = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"), "Taxon" = c("TaxA", "TaxA"), "data" = data.frame("Ch1" = 1:2,"Ch2" = 1:2)))
indata = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA"),
"data" = data.frame("Ch1" = 1:2,"Ch2" = 1:2))
indata[,-(1:3)]
indata
indata = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA"),
"Ch1" = 1:2,"Ch2" = 1:2)
indata[,-(1:3)]
indata = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA"),
"Ch1" = 1:2)
indata[,-(1:3)]
as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID)
)
indata = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA"),
"Ch1" = 1:2,"Ch2" = 1:2)
as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID))
indata = data.frame("ID" = c("id1","id2"), "Population" = c("Pop1", "Pop1"),
"Taxon" = c("TaxA", "TaxA"),
"Ch1" = 1:2)
as.data.frame(indata[,-(1:3)],  row.names = as.character(indata$ID))
indata[,-(1:3)]
colnames(indata[,-(1:3)])
indata[,-(1:3)]
colnames(indata)
colnames(indata)[4]
dim(indata)
dim(indata)[2]
dim(indata)[2] == 4
data
colnames(data$data)
colnames(indata)
colnames(data$data) = colnames(indata)[4]
data
newObject = newPcadata()
# internal
# returns new pcadata object
newPcadata <- function() {
newPcadata <- list(
objects = list(
ID = numeric(),
Population = numeric(),
Taxon = numeric(),
scores = numeric()),
eigenVectors = numeric(),
eigenValues = numeric(),
axesVariance = numeric(),
cumulativeAxesVariance = numeric(),
groupMeans = data.frame(),
rank = numeric(),
sdev = numeric(),
center = numeric(),
scale = numeric()
)
attr(newPcadata, "class") <- "pcadata"
return(newPcadata)
}
newObject = newPcadata()
newObject
expect_named(newObject, "d")
expect_named(newObject, c('objects', 'eigenVectors', 'eigenValues', 'axesVariance', 'cumulativeAxesVariance', 'groupMeans', 'rank', 'sdev', 'center', 'scale'))
expect_named(newObject$objects, c('objects', 'eigenVectors', 'eigenValues', 'axesVariance', 'cumulativeAxesVariance', 'groupMeans', 'rank', 'sdev', 'center', 'scale'))
# internal
# returns new morphodata object
newMorphodata <- function() {
newMorphodata <- list(ID = NULL, Population = NULL, Taxon = NULL, data = data.frame())
attr(newMorphodata, "class") <- "morphodata"
return(newMorphodata)
}
newObject = newMorphodata()
expect_named(newObject, c('objects', 'eigenVectors', 'eigenValues', 'axesVariance', 'cumulativeAxesVariance', 'groupMeans', 'rank', 'sdev', 'center', 'scale'))
data
centaurea
detach("package:MorphoTools", unload = TRUE)
library(MorphoTools)
dp = delete.population(object = centaurea, populationName = "RTE")
export.res(dp)
dp = delete.population(object = centaurea, populationName = "PREL")
export.res(dp)
popul.otu(morphoMockup)
pop = popul.otu(morphoMockup)
expect_equal(levels(pop$ID) , levels(pop$Population))
pop$ID
pop$Population
morphoDataFrame = data.frame("ID" = c("id1","id2","id3","id4","id5","id6","id7","id8"),
"Population" = c("Pop1", "Pop1", "Pop2", "Pop2", "Pop3", "Pop3", "Pop4", "Pop4"),
"Taxon" = c("TaxA", "TaxA", "TaxA", "TaxA", "TaxB", "TaxB", "TaxB", "TaxB"),
"Ch1" = 1:8,
"Ch2" = 11:18)
morphoMockup = morphodataFromDataFrame(morphoDataFrame)
pop = popul.otu(morphoMockup)
expect_equal(levels(pop$ID) , levels(pop$Population))
pop
pop$data
expect_equal(pop$data[1,1], ((1+2)/2))
expect_equal(pop$data[1,2], ((11+12)/2))
expect_equal(pop$data[4,2], ((17+18)/2))
expect_equal(pop$data[4,2], ((7+8)/2))
expect_equal(pop$data[4,1], ((7+8)/2))
pop$Taxon
expect_equal(pop$Taxon , levels(pop$Population))
pop$Taxon
expect_equal(pop$Taxon , pop$Population)
levels(pop$Taxon)
expect_equal(levels(pop$Taxon) , "TaxA TaxB")
